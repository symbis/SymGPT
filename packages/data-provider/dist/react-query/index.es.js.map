{"version":3,"file":"index.es.js","sources":["../../src/types/assistants.ts","../../src/feedback.ts","../../src/schemas.ts","../../src/models.ts","../../src/file-config.ts","../../src/types/files.ts","../../src/types/agents.ts","../../src/utils.ts","../../src/mcp.ts","../../src/config.ts","../../src/api-endpoints.ts","../../src/request.ts","../../src/headers-helpers.ts","../../src/data-service.ts","../../src/keys.ts","../../src/accessPermissions.ts","../../src/react-query/react-query-service.ts"],"sourcesContent":["import type { OpenAPIV3 } from 'openapi-types';\nimport type { AssistantsEndpoint, AgentProvider } from 'src/schemas';\nimport type { ContentTypes } from './runs';\nimport type { Agents } from './agents';\nimport type { TFile } from './files';\nimport { ArtifactModes } from 'src/artifacts';\n\nexport type Schema = OpenAPIV3.SchemaObject & { description?: string };\nexport type Reference = OpenAPIV3.ReferenceObject & { description?: string };\n\nexport type Metadata = {\n  avatar?: string;\n  author?: string;\n} & {\n  [key: string]: unknown;\n};\n\nexport enum Tools {\n  execute_code = 'execute_code',\n  code_interpreter = 'code_interpreter',\n  file_search = 'file_search',\n  web_search = 'web_search',\n  retrieval = 'retrieval',\n  function = 'function',\n  memory = 'memory',\n}\n\nexport enum EToolResources {\n  code_interpreter = 'code_interpreter',\n  execute_code = 'execute_code',\n  file_search = 'file_search',\n  image_edit = 'image_edit',\n  ocr = 'ocr',\n}\n\nexport type Tool = {\n  [type: string]: Tools;\n};\n\nexport type FunctionTool = {\n  type: Tools;\n  function?: {\n    description: string;\n    name: string;\n    parameters: Record<string, unknown>;\n    strict?: boolean;\n    additionalProperties?: boolean; // must be false if strict is true https://platform.openai.com/docs/guides/structured-outputs/some-type-specific-keywords-are-not-yet-supported\n  };\n};\n\n/**\n * A set of resources that are used by the assistant's tools. The resources are\n * specific to the type of tool. For example, the `code_interpreter` tool requires\n * a list of file IDs, while the `file_search` tool requires a list of vector store\n * IDs.\n */\nexport interface ToolResources {\n  code_interpreter?: CodeInterpreterResource;\n  file_search?: FileSearchResource;\n}\nexport interface CodeInterpreterResource {\n  /**\n   * A list of [file](https://platform.openai.com/docs/api-reference/files) IDs made\n   * available to the `code_interpreter`` tool. There can be a maximum of 20 files\n   * associated with the tool.\n   */\n  file_ids?: Array<string>;\n}\n\nexport interface FileSearchResource {\n  /**\n   * The ID of the\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n   * attached to this assistant. There can be a maximum of 1 vector store attached to\n   * the assistant.\n   */\n  vector_store_ids?: Array<string>;\n}\n\n/* Assistant types */\n\nexport type Assistant = {\n  id: string;\n  created_at: number;\n  description: string | null;\n  file_ids?: string[];\n  instructions: string | null;\n  conversation_starters?: string[];\n  metadata: Metadata | null;\n  model: string;\n  name: string | null;\n  object: string;\n  tools?: FunctionTool[];\n  tool_resources?: ToolResources;\n};\n\nexport type TAssistantsMap = Record<AssistantsEndpoint, Record<string, Assistant>>;\n\nexport type AssistantCreateParams = {\n  model: string;\n  description?: string | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  conversation_starters?: string[];\n  metadata?: Metadata | null;\n  name?: string | null;\n  tools?: Array<FunctionTool | string>;\n  endpoint: AssistantsEndpoint;\n  version: number | string;\n  append_current_datetime?: boolean;\n};\n\nexport type AssistantUpdateParams = {\n  model?: string;\n  description?: string | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  conversation_starters?: string[] | null;\n  metadata?: Metadata | null;\n  name?: string | null;\n  tools?: Array<FunctionTool | string>;\n  tool_resources?: ToolResources;\n  endpoint: AssistantsEndpoint;\n  append_current_datetime?: boolean;\n};\n\nexport type AssistantListParams = {\n  limit?: number;\n  before?: string | null;\n  after?: string | null;\n  order?: 'asc' | 'desc';\n  endpoint: AssistantsEndpoint;\n};\n\nexport type AssistantListResponse = {\n  object: string;\n  data: Assistant[];\n  first_id: string;\n  last_id: string;\n  has_more: boolean;\n};\n\nexport type File = {\n  file_id: string;\n  id?: string;\n  temp_file_id?: string;\n  bytes: number;\n  created_at: number;\n  filename: string;\n  object: string;\n  purpose: 'fine-tune' | 'fine-tune-results' | 'assistants' | 'assistants_output';\n};\n\n/* Agent types */\n\nexport type AgentParameterValue = number | string | null;\n\nexport type AgentModelParameters = {\n  model?: string;\n  temperature: AgentParameterValue;\n  maxContextTokens: AgentParameterValue;\n  max_context_tokens: AgentParameterValue;\n  max_output_tokens: AgentParameterValue;\n  top_p: AgentParameterValue;\n  frequency_penalty: AgentParameterValue;\n  presence_penalty: AgentParameterValue;\n};\n\nexport interface AgentBaseResource {\n  /**\n   * A list of file IDs made available to the tool.\n   */\n  file_ids?: Array<string>;\n  /**\n   * A list of files already fetched.\n   */\n  files?: Array<TFile>;\n}\n\nexport interface AgentToolResources {\n  [EToolResources.image_edit]?: AgentBaseResource;\n  [EToolResources.execute_code]?: ExecuteCodeResource;\n  [EToolResources.file_search]?: AgentFileResource;\n  [EToolResources.ocr]?: AgentBaseResource;\n}\n/**\n * A resource for the execute_code tool.\n * Contains file IDs made available to the tool (max 20 files) and already fetched files.\n */\nexport type ExecuteCodeResource = AgentBaseResource;\n\nexport interface AgentFileResource extends AgentBaseResource {\n  /**\n   * The ID of the vector store attached to this agent. There\n   * can be a maximum of 1 vector store attached to the agent.\n   */\n  vector_store_ids?: Array<string>;\n}\nexport type SupportContact = {\n  name?: string;\n  email?: string;\n};\n\nexport type Agent = {\n  _id?: string;\n  id: string;\n  name: string | null;\n  author?: string | null;\n  /** The original custom endpoint name, lowercased */\n  endpoint?: string | null;\n  authorName?: string | null;\n  description: string | null;\n  created_at: number;\n  avatar: AgentAvatar | null;\n  instructions: string | null;\n  additional_instructions?: string | null;\n  tools?: string[];\n  projectIds?: string[];\n  tool_kwargs?: Record<string, unknown>;\n  metadata?: Record<string, unknown>;\n  provider: AgentProvider;\n  model: string | null;\n  model_parameters: AgentModelParameters;\n  conversation_starters?: string[];\n  /** @deprecated Use ACL permissions instead */\n  isCollaborative?: boolean;\n  tool_resources?: AgentToolResources;\n  agent_ids?: string[];\n  end_after_tools?: boolean;\n  hide_sequential_outputs?: boolean;\n  artifacts?: ArtifactModes;\n  recursion_limit?: number;\n  isPublic?: boolean;\n  version?: number;\n  category?: string;\n  support_contact?: SupportContact;\n};\n\nexport type TAgentsMap = Record<string, Agent | undefined>;\n\nexport type AgentCreateParams = {\n  name?: string | null;\n  description?: string | null;\n  avatar?: AgentAvatar | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  tools?: Array<FunctionTool | string>;\n  provider: AgentProvider;\n  model: string | null;\n  model_parameters: AgentModelParameters;\n} & Pick<\n  Agent,\n  | 'agent_ids'\n  | 'end_after_tools'\n  | 'hide_sequential_outputs'\n  | 'artifacts'\n  | 'recursion_limit'\n  | 'category'\n  | 'support_contact'\n>;\n\nexport type AgentUpdateParams = {\n  name?: string | null;\n  description?: string | null;\n  avatar?: AgentAvatar | null;\n  file_ids?: string[];\n  instructions?: string | null;\n  tools?: Array<FunctionTool | string>;\n  tool_resources?: ToolResources;\n  provider?: AgentProvider;\n  model?: string | null;\n  model_parameters?: AgentModelParameters;\n  projectIds?: string[];\n  removeProjectIds?: string[];\n  isCollaborative?: boolean;\n} & Pick<\n  Agent,\n  | 'agent_ids'\n  | 'end_after_tools'\n  | 'hide_sequential_outputs'\n  | 'artifacts'\n  | 'recursion_limit'\n  | 'category'\n  | 'support_contact'\n>;\n\nexport type AgentListParams = {\n  limit?: number;\n  requiredPermission: number;\n  category?: string;\n  search?: string;\n  cursor?: string;\n  promoted?: 0 | 1;\n};\n\nexport type AgentListResponse = {\n  object: string;\n  data: Agent[];\n  first_id: string;\n  last_id: string;\n  has_more: boolean;\n  after?: string;\n};\n\nexport type AgentFile = {\n  file_id: string;\n  id?: string;\n  temp_file_id?: string;\n  bytes: number;\n  created_at: number;\n  filename: string;\n  object: string;\n  purpose: 'fine-tune' | 'fine-tune-results' | 'agents' | 'agents_output';\n};\n\n/**\n * Details of the Code Interpreter tool call the run step was involved in.\n * Includes the tool call ID, the code interpreter definition, and the type of tool call.\n */\nexport type CodeToolCall = {\n  id: string; // The ID of the tool call.\n  code_interpreter: {\n    input: string; // The input to the Code Interpreter tool call.\n    outputs: Array<Record<string, unknown>>; // The outputs from the Code Interpreter tool call.\n  };\n  type: 'code_interpreter'; // The type of tool call, always 'code_interpreter'.\n};\n\n/**\n * Details of a Function tool call the run step was involved in.\n * Includes the tool call ID, the function definition, and the type of tool call.\n */\nexport type FunctionToolCall = {\n  id: string; // The ID of the tool call object.\n  function: {\n    arguments: string; // The arguments passed to the function.\n    name: string; // The name of the function.\n    output: string | null; // The output of the function, null if not submitted.\n  };\n  type: 'function'; // The type of tool call, always 'function'.\n};\n\n/**\n * Details of a Retrieval tool call the run step was involved in.\n * Includes the tool call ID and the type of tool call.\n */\nexport type RetrievalToolCall = {\n  id: string; // The ID of the tool call object.\n  retrieval: unknown; // An empty object for now.\n  type: 'retrieval'; // The type of tool call, always 'retrieval'.\n};\n\n/**\n * Details of a Retrieval tool call the run step was involved in.\n * Includes the tool call ID and the type of tool call.\n */\nexport type FileSearchToolCall = {\n  id: string; // The ID of the tool call object.\n  file_search: unknown; // An empty object for now.\n  type: 'file_search'; // The type of tool call, always 'retrieval'.\n};\n\n/**\n * Details of the tool calls involved in a run step.\n * Can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`.\n */\nexport type ToolCallsStepDetails = {\n  tool_calls: Array<CodeToolCall | RetrievalToolCall | FileSearchToolCall | FunctionToolCall>; // An array of tool calls the run step was involved in.\n  type: 'tool_calls'; // Always 'tool_calls'.\n};\n\nexport type ImageFile = TFile & {\n  /**\n   * The [File](https://platform.openai.com/docs/api-reference/files) ID of the image\n   * in the message content.\n   */\n  file_id: string;\n  filename: string;\n  filepath: string;\n  height: number;\n  width: number;\n  /**\n   * Prompt used to generate the image if applicable.\n   */\n  prompt?: string;\n  /**\n   * Additional metadata used to generate or about the image/tool_call.\n   */\n  metadata?: Record<string, unknown>;\n};\n\n// FileCitation.ts\nexport type FileCitation = {\n  end_index: number;\n  file_citation: FileCitationDetails;\n  start_index: number;\n  text: string;\n  type: 'file_citation';\n};\n\nexport type FileCitationDetails = {\n  file_id: string;\n  quote: string;\n};\n\nexport type FilePath = {\n  end_index: number;\n  file_path: FilePathDetails;\n  start_index: number;\n  text: string;\n  type: 'file_path';\n};\n\nexport type FilePathDetails = {\n  file_id: string;\n};\n\nexport type Text = {\n  annotations?: Array<FileCitation | FilePath>;\n  value: string;\n};\n\nexport enum AnnotationTypes {\n  FILE_CITATION = 'file_citation',\n  FILE_PATH = 'file_path',\n}\n\nexport enum StepStatus {\n  IN_PROGRESS = 'in_progress',\n  CANCELLED = 'cancelled',\n  FAILED = 'failed',\n  COMPLETED = 'completed',\n  EXPIRED = 'expired',\n}\n\nexport enum MessageContentTypes {\n  TEXT = 'text',\n  IMAGE_FILE = 'image_file',\n}\n\n//enum for RunStatus\n// The status of the run: queued, in_progress, requires_action, cancelling, cancelled, failed, completed, or expired.\nexport enum RunStatus {\n  QUEUED = 'queued',\n  IN_PROGRESS = 'in_progress',\n  REQUIRES_ACTION = 'requires_action',\n  CANCELLING = 'cancelling',\n  CANCELLED = 'cancelled',\n  FAILED = 'failed',\n  COMPLETED = 'completed',\n  EXPIRED = 'expired',\n}\n\nexport type PartMetadata = {\n  progress?: number;\n  asset_pointer?: string;\n  status?: string;\n  action?: boolean;\n  auth?: string;\n  expires_at?: number;\n};\n\nexport type ContentPart = (\n  | CodeToolCall\n  | RetrievalToolCall\n  | FileSearchToolCall\n  | FunctionToolCall\n  | Agents.AgentToolCall\n  | ImageFile\n  | Text\n) &\n  PartMetadata;\n\nexport type TMessageContentParts =\n  | { type: ContentTypes.ERROR; text?: string | (Text & PartMetadata); error?: string }\n  | { type: ContentTypes.THINK; think: string | (Text & PartMetadata) }\n  | { type: ContentTypes.TEXT; text: string | (Text & PartMetadata); tool_call_ids?: string[] }\n  | {\n      type: ContentTypes.TOOL_CALL;\n      tool_call: (\n        | CodeToolCall\n        | RetrievalToolCall\n        | FileSearchToolCall\n        | FunctionToolCall\n        | Agents.AgentToolCall\n      ) &\n        PartMetadata;\n    }\n  | { type: ContentTypes.IMAGE_FILE; image_file: ImageFile & PartMetadata }\n  | Agents.AgentUpdate\n  | Agents.MessageContentImageUrl;\n\nexport type StreamContentData = TMessageContentParts & {\n  /** The index of the current content part */\n  index: number;\n  /** The current text content was already served but edited to replace elements therein */\n  edited?: boolean;\n};\n\nexport type TContentData = StreamContentData & {\n  messageId: string;\n  conversationId: string;\n  userMessageId: string;\n  thread_id: string;\n  stream?: boolean;\n};\n\nexport const actionDelimiter = '_action_';\nexport const actionDomainSeparator = '---';\nexport const hostImageIdSuffix = '_host_copy';\nexport const hostImageNamePrefix = 'host_copy_';\n\nexport type AssistantAvatar = {\n  filepath: string;\n  source: string;\n};\n\nexport type AssistantDocument = {\n  user: string;\n  assistant_id: string;\n  conversation_starters?: string[];\n  avatar?: AssistantAvatar;\n  access_level?: number;\n  file_ids?: string[];\n  actions?: string[];\n  createdAt?: Date;\n  updatedAt?: Date;\n  append_current_datetime?: boolean;\n};\n\n/* Agent types */\n\nexport type AgentAvatar = {\n  filepath: string;\n  source: string;\n};\n\nexport enum FilePurpose {\n  Vision = 'vision',\n  FineTune = 'fine-tune',\n  FineTuneResults = 'fine-tune-results',\n  Assistants = 'assistants',\n  AssistantsOutput = 'assistants_output',\n}\n\nexport const defaultOrderQuery: {\n  order: 'desc';\n  limit: 100;\n} = {\n  order: 'desc',\n  limit: 100,\n};\n\nexport enum AssistantStreamEvents {\n  ThreadCreated = 'thread.created',\n  ThreadRunCreated = 'thread.run.created',\n  ThreadRunQueued = 'thread.run.queued',\n  ThreadRunInProgress = 'thread.run.in_progress',\n  ThreadRunRequiresAction = 'thread.run.requires_action',\n  ThreadRunCompleted = 'thread.run.completed',\n  ThreadRunFailed = 'thread.run.failed',\n  ThreadRunCancelling = 'thread.run.cancelling',\n  ThreadRunCancelled = 'thread.run.cancelled',\n  ThreadRunExpired = 'thread.run.expired',\n  ThreadRunStepCreated = 'thread.run.step.created',\n  ThreadRunStepInProgress = 'thread.run.step.in_progress',\n  ThreadRunStepCompleted = 'thread.run.step.completed',\n  ThreadRunStepFailed = 'thread.run.step.failed',\n  ThreadRunStepCancelled = 'thread.run.step.cancelled',\n  ThreadRunStepExpired = 'thread.run.step.expired',\n  ThreadRunStepDelta = 'thread.run.step.delta',\n  ThreadMessageCreated = 'thread.message.created',\n  ThreadMessageInProgress = 'thread.message.in_progress',\n  ThreadMessageCompleted = 'thread.message.completed',\n  ThreadMessageIncomplete = 'thread.message.incomplete',\n  ThreadMessageDelta = 'thread.message.delta',\n  ErrorEvent = 'error',\n}\n","import { z } from 'zod';\n\nexport type TFeedbackRating = 'thumbsUp' | 'thumbsDown';\nexport const FEEDBACK_RATINGS = ['thumbsUp', 'thumbsDown'] as const;\n\nexport const FEEDBACK_REASON_KEYS = [\n  // Down\n  'not_matched',\n  'inaccurate',\n  'bad_style',\n  'missing_image',\n  'unjustified_refusal',\n  'not_helpful',\n  'other',\n  // Up\n  'accurate_reliable',\n  'creative_solution',\n  'clear_well_written',\n  'attention_to_detail',\n] as const;\n\nexport type TFeedbackTagKey = (typeof FEEDBACK_REASON_KEYS)[number];\n\nexport interface TFeedbackTag {\n  key: TFeedbackTagKey;\n  label: string;\n  direction: TFeedbackRating;\n  icon: string;\n}\n\n// --- Tag Registry ---\nexport const FEEDBACK_TAGS: TFeedbackTag[] = [\n  // Thumbs Down\n  {\n    key: 'not_matched',\n    label: 'com_ui_feedback_tag_not_matched',\n    direction: 'thumbsDown',\n    icon: 'AlertCircle',\n  },\n  {\n    key: 'inaccurate',\n    label: 'com_ui_feedback_tag_inaccurate',\n    direction: 'thumbsDown',\n    icon: 'AlertCircle',\n  },\n  {\n    key: 'bad_style',\n    label: 'com_ui_feedback_tag_bad_style',\n    direction: 'thumbsDown',\n    icon: 'PenTool',\n  },\n  {\n    key: 'missing_image',\n    label: 'com_ui_feedback_tag_missing_image',\n    direction: 'thumbsDown',\n    icon: 'ImageOff',\n  },\n  {\n    key: 'unjustified_refusal',\n    label: 'com_ui_feedback_tag_unjustified_refusal',\n    direction: 'thumbsDown',\n    icon: 'Ban',\n  },\n  {\n    key: 'not_helpful',\n    label: 'com_ui_feedback_tag_not_helpful',\n    direction: 'thumbsDown',\n    icon: 'ThumbsDown',\n  },\n  {\n    key: 'other',\n    label: 'com_ui_feedback_tag_other',\n    direction: 'thumbsDown',\n    icon: 'HelpCircle',\n  },\n  // Thumbs Up\n  {\n    key: 'accurate_reliable',\n    label: 'com_ui_feedback_tag_accurate_reliable',\n    direction: 'thumbsUp',\n    icon: 'CheckCircle',\n  },\n  {\n    key: 'creative_solution',\n    label: 'com_ui_feedback_tag_creative_solution',\n    direction: 'thumbsUp',\n    icon: 'Lightbulb',\n  },\n  {\n    key: 'clear_well_written',\n    label: 'com_ui_feedback_tag_clear_well_written',\n    direction: 'thumbsUp',\n    icon: 'PenTool',\n  },\n  {\n    key: 'attention_to_detail',\n    label: 'com_ui_feedback_tag_attention_to_detail',\n    direction: 'thumbsUp',\n    icon: 'Search',\n  },\n];\n\nexport function getTagsForRating(rating: TFeedbackRating): TFeedbackTag[] {\n  return FEEDBACK_TAGS.filter((tag) => tag.direction === rating);\n}\n\nexport const feedbackTagKeySchema = z.enum(FEEDBACK_REASON_KEYS);\nexport const feedbackRatingSchema = z.enum(FEEDBACK_RATINGS);\n\nexport const feedbackSchema = z.object({\n  rating: feedbackRatingSchema,\n  tag: feedbackTagKeySchema,\n  text: z.string().max(1024).optional(),\n});\n\nexport type TMinimalFeedback = z.infer<typeof feedbackSchema>;\n\nexport type TFeedback = {\n  rating: TFeedbackRating;\n  tag: TFeedbackTag | undefined;\n  text?: string;\n};\n\nexport function toMinimalFeedback(feedback: TFeedback | undefined): TMinimalFeedback | undefined {\n  if (!feedback?.rating || !feedback?.tag || !feedback.tag.key) {\n    return undefined;\n  }\n\n  return {\n    rating: feedback.rating,\n    tag: feedback.tag.key,\n    text: feedback.text,\n  };\n}\n\nexport function getTagByKey(key: TFeedbackTagKey | undefined): TFeedbackTag | undefined {\n  if (!key) {\n    return undefined;\n  }\n  return FEEDBACK_TAGS.find((tag) => tag.key === key);\n}\n","import { z } from 'zod';\nimport { Tools } from './types/assistants';\nimport type { TMessageContentParts, FunctionTool, FunctionToolCall } from './types/assistants';\nimport { TFeedback, feedbackSchema } from './feedback';\nimport type { SearchResultData } from './types/web';\nimport type { TFile } from './types/files';\n\nexport const isUUID = z.string().uuid();\n\nexport enum AuthType {\n  OVERRIDE_AUTH = 'override_auth',\n  USER_PROVIDED = 'user_provided',\n  SYSTEM_DEFINED = 'system_defined',\n}\n\nexport const authTypeSchema = z.nativeEnum(AuthType);\n\nexport enum EModelEndpoint {\n  azureOpenAI = 'azureOpenAI',\n  openAI = 'openAI',\n  google = 'google',\n  anthropic = 'anthropic',\n  assistants = 'assistants',\n  azureAssistants = 'azureAssistants',\n  agents = 'agents',\n  custom = 'custom',\n  bedrock = 'bedrock',\n  /** @deprecated */\n  chatGPTBrowser = 'chatGPTBrowser',\n  /** @deprecated */\n  gptPlugins = 'gptPlugins',\n}\n\nexport const paramEndpoints = new Set<EModelEndpoint | string>([\n  EModelEndpoint.agents,\n  EModelEndpoint.openAI,\n  EModelEndpoint.bedrock,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.custom,\n  EModelEndpoint.google,\n]);\n\nexport enum BedrockProviders {\n  AI21 = 'ai21',\n  Amazon = 'amazon',\n  Anthropic = 'anthropic',\n  Cohere = 'cohere',\n  Meta = 'meta',\n  MistralAI = 'mistral',\n  StabilityAI = 'stability',\n  DeepSeek = 'deepseek',\n}\n\nexport const getModelKey = (endpoint: EModelEndpoint | string, model: string) => {\n  if (endpoint === EModelEndpoint.bedrock) {\n    const parts = model.split('.');\n    const provider = [parts[0], parts[1]].find((part) =>\n      Object.values(BedrockProviders).includes(part as BedrockProviders),\n    );\n    return (provider ?? parts[0]) as BedrockProviders;\n  }\n  return model;\n};\n\nexport const getSettingsKeys = (endpoint: EModelEndpoint | string, model: string) => {\n  const endpointKey = endpoint;\n  const modelKey = getModelKey(endpointKey, model);\n  const combinedKey = `${endpointKey}-${modelKey}`;\n  return [combinedKey, endpointKey];\n};\n\nexport type AssistantsEndpoint = EModelEndpoint.assistants | EModelEndpoint.azureAssistants;\n\nexport const isAssistantsEndpoint = (_endpoint?: AssistantsEndpoint | null | string): boolean => {\n  const endpoint = _endpoint ?? '';\n  if (!endpoint) {\n    return false;\n  }\n  return endpoint.toLowerCase().endsWith(EModelEndpoint.assistants);\n};\n\nexport type AgentProvider = Exclude<keyof typeof EModelEndpoint, EModelEndpoint.agents> | string;\n\nexport const isAgentsEndpoint = (_endpoint?: EModelEndpoint.agents | null | string): boolean => {\n  const endpoint = _endpoint ?? '';\n  if (!endpoint) {\n    return false;\n  }\n  return endpoint === EModelEndpoint.agents;\n};\n\nexport const isParamEndpoint = (\n  endpoint: EModelEndpoint | string,\n  endpointType?: EModelEndpoint | string,\n): boolean => {\n  if (paramEndpoints.has(endpoint)) {\n    return true;\n  }\n\n  if (endpointType != null) {\n    return paramEndpoints.has(endpointType);\n  }\n\n  return false;\n};\n\nexport enum ImageDetail {\n  low = 'low',\n  auto = 'auto',\n  high = 'high',\n}\n\nexport enum ReasoningEffort {\n  none = '',\n  minimal = 'minimal',\n  low = 'low',\n  medium = 'medium',\n  high = 'high',\n}\n\nexport enum ReasoningSummary {\n  none = '',\n  auto = 'auto',\n  concise = 'concise',\n  detailed = 'detailed',\n}\n\nexport enum Verbosity {\n  none = '',\n  low = 'low',\n  medium = 'medium',\n  high = 'high',\n}\n\nexport const imageDetailNumeric = {\n  [ImageDetail.low]: 0,\n  [ImageDetail.auto]: 1,\n  [ImageDetail.high]: 2,\n};\n\nexport const imageDetailValue = {\n  0: ImageDetail.low,\n  1: ImageDetail.auto,\n  2: ImageDetail.high,\n};\n\nexport const eImageDetailSchema = z.nativeEnum(ImageDetail);\nexport const eReasoningEffortSchema = z.nativeEnum(ReasoningEffort);\nexport const eReasoningSummarySchema = z.nativeEnum(ReasoningSummary);\nexport const eVerbositySchema = z.nativeEnum(Verbosity);\n\nexport const defaultAssistantFormValues = {\n  assistant: '',\n  id: '',\n  name: '',\n  description: '',\n  instructions: '',\n  conversation_starters: [],\n  model: '',\n  functions: [],\n  code_interpreter: false,\n  image_vision: false,\n  retrieval: false,\n  append_current_datetime: false,\n};\n\nexport const defaultAgentFormValues = {\n  agent: {},\n  id: '',\n  name: '',\n  description: '',\n  instructions: '',\n  model: '',\n  model_parameters: {},\n  tools: [],\n  provider: {},\n  projectIds: [],\n  artifacts: '',\n  /** @deprecated Use ACL permissions instead */\n  isCollaborative: false,\n  recursion_limit: undefined,\n  [Tools.execute_code]: false,\n  [Tools.file_search]: false,\n  [Tools.web_search]: false,\n  category: 'general',\n  support_contact: {\n    name: '',\n    email: '',\n  },\n};\n\nexport const ImageVisionTool: FunctionTool = {\n  type: Tools.function,\n  [Tools.function]: {\n    name: 'image_vision',\n    description: 'Get detailed text descriptions for all current image attachments.',\n    parameters: {\n      type: 'object',\n      properties: {},\n      required: [],\n    },\n  },\n};\n\nexport const isImageVisionTool = (tool: FunctionTool | FunctionToolCall) =>\n  tool.type === 'function' && tool.function?.name === ImageVisionTool.function?.name;\n\nexport const openAISettings = {\n  model: {\n    default: 'gpt-4o-mini' as const,\n  },\n  temperature: {\n    min: 0 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  top_p: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  presence_penalty: {\n    min: -2 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 0 as const,\n  },\n  frequency_penalty: {\n    min: -2 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 0 as const,\n  },\n  resendFiles: {\n    default: true as const,\n  },\n  maxContextTokens: {\n    default: undefined,\n  },\n  max_tokens: {\n    default: undefined,\n  },\n  imageDetail: {\n    default: ImageDetail.auto as const,\n    min: 0 as const,\n    max: 2 as const,\n    step: 1 as const,\n  },\n};\n\nexport const googleSettings = {\n  model: {\n    default: 'gemini-1.5-flash-latest' as const,\n  },\n  maxOutputTokens: {\n    min: 1 as const,\n    max: 64000 as const,\n    step: 1 as const,\n    default: 8192 as const,\n  },\n  temperature: {\n    min: 0 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  topP: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 0.95 as const,\n  },\n  topK: {\n    min: 1 as const,\n    max: 40 as const,\n    step: 1 as const,\n    default: 40 as const,\n  },\n  thinking: {\n    default: true as const,\n  },\n  thinkingBudget: {\n    min: -1 as const,\n    max: 32768 as const,\n    step: 1 as const,\n    /** `-1` = Dynamic Thinking, meaning the model will adjust\n     * the budget based on the complexity of the request.\n     */\n    default: -1 as const,\n  },\n};\n\nconst ANTHROPIC_MAX_OUTPUT = 128000 as const;\nconst DEFAULT_MAX_OUTPUT = 8192 as const;\nconst LEGACY_ANTHROPIC_MAX_OUTPUT = 4096 as const;\nexport const anthropicSettings = {\n  model: {\n    default: 'claude-3-5-sonnet-latest' as const,\n  },\n  temperature: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  promptCache: {\n    default: true as const,\n  },\n  thinking: {\n    default: true as const,\n  },\n  thinkingBudget: {\n    min: 1024 as const,\n    step: 100 as const,\n    max: 200000 as const,\n    default: 2000 as const,\n  },\n  maxOutputTokens: {\n    min: 1 as const,\n    max: ANTHROPIC_MAX_OUTPUT,\n    step: 1 as const,\n    default: DEFAULT_MAX_OUTPUT,\n    reset: (modelName: string) => {\n      if (/claude-3[-.]5-sonnet/.test(modelName) || /claude-3[-.]7/.test(modelName)) {\n        return DEFAULT_MAX_OUTPUT;\n      }\n\n      return 4096;\n    },\n    set: (value: number, modelName: string) => {\n      if (\n        !(/claude-3[-.]5-sonnet/.test(modelName) || /claude-3[-.]7/.test(modelName)) &&\n        value > LEGACY_ANTHROPIC_MAX_OUTPUT\n      ) {\n        return LEGACY_ANTHROPIC_MAX_OUTPUT;\n      }\n\n      return value;\n    },\n  },\n  topP: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 0.7 as const,\n  },\n  topK: {\n    min: 1 as const,\n    max: 40 as const,\n    step: 1 as const,\n    default: 5 as const,\n  },\n  resendFiles: {\n    default: true as const,\n  },\n  maxContextTokens: {\n    default: undefined,\n  },\n  legacy: {\n    maxOutputTokens: {\n      min: 1 as const,\n      max: LEGACY_ANTHROPIC_MAX_OUTPUT,\n      step: 1 as const,\n      default: LEGACY_ANTHROPIC_MAX_OUTPUT,\n    },\n  },\n  web_search: {\n    default: false as const,\n  },\n};\n\nexport const agentsSettings = {\n  model: {\n    default: 'gpt-3.5-turbo-test' as const,\n  },\n  temperature: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  top_p: {\n    min: 0 as const,\n    max: 1 as const,\n    step: 0.01 as const,\n    default: 1 as const,\n  },\n  presence_penalty: {\n    min: -2 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 0 as const,\n  },\n  frequency_penalty: {\n    min: -2 as const,\n    max: 2 as const,\n    step: 0.01 as const,\n    default: 0 as const,\n  },\n  resendFiles: {\n    default: true as const,\n  },\n  maxContextTokens: {\n    default: undefined,\n  },\n  max_tokens: {\n    default: undefined,\n  },\n  imageDetail: {\n    default: ImageDetail.auto as const,\n  },\n};\n\nexport const endpointSettings = {\n  [EModelEndpoint.openAI]: openAISettings,\n  [EModelEndpoint.google]: googleSettings,\n  [EModelEndpoint.anthropic]: anthropicSettings,\n  [EModelEndpoint.agents]: agentsSettings,\n  [EModelEndpoint.bedrock]: agentsSettings,\n};\n\nconst google = endpointSettings[EModelEndpoint.google];\n\nexport const eModelEndpointSchema = z.nativeEnum(EModelEndpoint);\n\nexport const extendedModelEndpointSchema = z.union([eModelEndpointSchema, z.string()]);\n\nexport const tPluginAuthConfigSchema = z.object({\n  authField: z.string(),\n  label: z.string(),\n  description: z.string(),\n});\n\nexport type TPluginAuthConfig = z.infer<typeof tPluginAuthConfigSchema>;\n\nexport const tPluginSchema = z.object({\n  name: z.string(),\n  pluginKey: z.string(),\n  description: z.string().optional(),\n  icon: z.string().optional(),\n  authConfig: z.array(tPluginAuthConfigSchema).optional(),\n  authenticated: z.boolean().optional(),\n  chatMenu: z.boolean().optional(),\n  isButton: z.boolean().optional(),\n  toolkit: z.boolean().optional(),\n});\n\nexport type TPlugin = z.infer<typeof tPluginSchema>;\n\nexport type TInput = {\n  inputStr: string;\n};\n\nexport type TResPlugin = {\n  plugin: string;\n  input: string;\n  thought: string;\n  loading?: boolean;\n  outputs?: string;\n  latest?: string;\n  inputs?: TInput[];\n};\n\nexport const tExampleSchema = z.object({\n  input: z.object({\n    content: z.string(),\n  }),\n  output: z.object({\n    content: z.string(),\n  }),\n});\n\nexport type TExample = z.infer<typeof tExampleSchema>;\n\nexport enum EAgent {\n  functions = 'functions',\n  classic = 'classic',\n}\n\nexport const agentOptionSettings = {\n  model: {\n    default: 'gpt-4o-mini',\n  },\n  temperature: {\n    min: 0,\n    max: 1,\n    step: 0.01,\n    default: 0,\n  },\n  agent: {\n    default: EAgent.functions,\n    options: [EAgent.functions, EAgent.classic],\n  },\n  skipCompletion: {\n    default: true,\n  },\n};\n\nexport const eAgentOptionsSchema = z.nativeEnum(EAgent);\n\nexport const tAgentOptionsSchema = z.object({\n  agent: z.string().default(EAgent.functions),\n  skipCompletion: z.boolean().default(agentOptionSettings.skipCompletion.default),\n  model: z.string(),\n  temperature: z.number().default(agentOptionSettings.temperature.default),\n});\n\nexport const tMessageSchema = z.object({\n  messageId: z.string(),\n  endpoint: z.string().optional(),\n  clientId: z.string().nullable().optional(),\n  conversationId: z.string().nullable(),\n  parentMessageId: z.string().nullable(),\n  responseMessageId: z.string().nullable().optional(),\n  overrideParentMessageId: z.string().nullable().optional(),\n  bg: z.string().nullable().optional(),\n  model: z.string().nullable().optional(),\n  title: z.string().nullable().or(z.literal('New Chat')).default('New Chat'),\n  sender: z.string().optional(),\n  text: z.string(),\n  /** @deprecated */\n  generation: z.string().nullable().optional(),\n  isCreatedByUser: z.boolean(),\n  error: z.boolean().optional(),\n  clientTimestamp: z.string().optional(),\n  createdAt: z\n    .string()\n    .optional()\n    .default(() => new Date().toISOString()),\n  updatedAt: z\n    .string()\n    .optional()\n    .default(() => new Date().toISOString()),\n  current: z.boolean().optional(),\n  unfinished: z.boolean().optional(),\n  searchResult: z.boolean().optional(),\n  finish_reason: z.string().optional(),\n  /* assistant */\n  thread_id: z.string().optional(),\n  /* frontend components */\n  iconURL: z.string().nullable().optional(),\n  feedback: feedbackSchema.optional(),\n});\n\nexport type MemoryArtifact = {\n  key: string;\n  value?: string;\n  tokenCount?: number;\n  type: 'update' | 'delete' | 'error';\n};\n\nexport type TAttachmentMetadata = {\n  type?: Tools;\n  messageId: string;\n  toolCallId: string;\n  [Tools.web_search]?: SearchResultData;\n  [Tools.file_search]?: SearchResultData;\n  [Tools.memory]?: MemoryArtifact;\n};\n\nexport type TAttachment =\n  | (TFile & TAttachmentMetadata)\n  | (Pick<TFile, 'filename' | 'filepath' | 'conversationId'> & {\n      expiresAt: number;\n    } & TAttachmentMetadata);\n\nexport type TMessage = z.input<typeof tMessageSchema> & {\n  children?: TMessage[];\n  plugin?: TResPlugin | null;\n  plugins?: TResPlugin[];\n  content?: TMessageContentParts[];\n  files?: Partial<TFile>[];\n  depth?: number;\n  siblingIndex?: number;\n  attachments?: TAttachment[];\n  clientTimestamp?: string;\n  feedback?: TFeedback;\n};\n\nexport const coerceNumber = z.union([z.number(), z.string()]).transform((val) => {\n  if (typeof val === 'string') {\n    return val.trim() === '' ? undefined : parseFloat(val);\n  }\n  return val;\n});\n\ntype DocumentTypeValue =\n  | null\n  | boolean\n  | number\n  | string\n  | DocumentTypeValue[]\n  | { [key: string]: DocumentTypeValue };\n\nconst DocumentType: z.ZodType<DocumentTypeValue> = z.lazy(() =>\n  z.union([\n    z.null(),\n    z.boolean(),\n    z.number(),\n    z.string(),\n    z.array(z.lazy(() => DocumentType)),\n    z.record(z.lazy(() => DocumentType)),\n  ]),\n);\n\nexport const tConversationSchema = z.object({\n  conversationId: z.string().nullable(),\n  endpoint: eModelEndpointSchema.nullable(),\n  endpointType: eModelEndpointSchema.nullable().optional(),\n  isArchived: z.boolean().optional(),\n  title: z.string().nullable().or(z.literal('New Chat')).default('New Chat'),\n  user: z.string().optional(),\n  messages: z.array(z.string()).optional(),\n  tools: z.union([z.array(tPluginSchema), z.array(z.string())]).optional(),\n  modelLabel: z.string().nullable().optional(),\n  userLabel: z.string().optional(),\n  model: z.string().nullable().optional(),\n  promptPrefix: z.string().nullable().optional(),\n  temperature: z.number().optional(),\n  topP: z.number().optional(),\n  topK: z.number().optional(),\n  top_p: z.number().optional(),\n  frequency_penalty: z.number().optional(),\n  presence_penalty: z.number().optional(),\n  parentMessageId: z.string().optional(),\n  maxOutputTokens: coerceNumber.optional(),\n  maxContextTokens: coerceNumber.optional(),\n  max_tokens: coerceNumber.optional(),\n  /* Anthropic */\n  promptCache: z.boolean().optional(),\n  system: z.string().optional(),\n  thinking: z.boolean().optional(),\n  thinkingBudget: coerceNumber.optional(),\n  /* artifacts */\n  artifacts: z.string().optional(),\n  /* google */\n  context: z.string().nullable().optional(),\n  examples: z.array(tExampleSchema).optional(),\n  /* DB */\n  tags: z.array(z.string()).optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  /* Files */\n  resendFiles: z.boolean().optional(),\n  file_ids: z.array(z.string()).optional(),\n  /* vision */\n  imageDetail: eImageDetailSchema.optional(),\n  /* OpenAI: Reasoning models only */\n  reasoning_effort: eReasoningEffortSchema.optional().nullable(),\n  reasoning_summary: eReasoningSummarySchema.optional().nullable(),\n  /* OpenAI: Verbosity control */\n  verbosity: eVerbositySchema.optional().nullable(),\n  /* OpenAI: use Responses API */\n  useResponsesApi: z.boolean().optional(),\n  /* OpenAI Responses API / Anthropic API / Google API */\n  web_search: z.boolean().optional(),\n  /* disable streaming */\n  disableStreaming: z.boolean().optional(),\n  /* assistant */\n  assistant_id: z.string().optional(),\n  /* agents */\n  agent_id: z.string().optional(),\n  /* AWS Bedrock */\n  region: z.string().optional(),\n  maxTokens: coerceNumber.optional(),\n  additionalModelRequestFields: DocumentType.optional(),\n  /* assistants */\n  instructions: z.string().optional(),\n  additional_instructions: z.string().optional(),\n  append_current_datetime: z.boolean().optional(),\n  /** Used to overwrite active conversation settings when saving a Preset */\n  presetOverride: z.record(z.unknown()).optional(),\n  stop: z.array(z.string()).optional(),\n  /* frontend components */\n  greeting: z.string().optional(),\n  spec: z.string().nullable().optional(),\n  iconURL: z.string().nullable().optional(),\n  /* temporary chat */\n  expiredAt: z.string().nullable().optional(),\n  /** @deprecated */\n  resendImages: z.boolean().optional(),\n  /** @deprecated */\n  agentOptions: tAgentOptionsSchema.nullable().optional(),\n  /** @deprecated Prefer `modelLabel` over `chatGptLabel` */\n  chatGptLabel: z.string().nullable().optional(),\n});\n\nexport const tPresetSchema = tConversationSchema\n  .omit({\n    conversationId: true,\n    createdAt: true,\n    updatedAt: true,\n    title: true,\n  })\n  .merge(\n    z.object({\n      conversationId: z.string().nullable().optional(),\n      presetId: z.string().nullable().optional(),\n      title: z.string().nullable().optional(),\n      defaultPreset: z.boolean().optional(),\n      order: z.number().optional(),\n      endpoint: extendedModelEndpointSchema.nullable(),\n    }),\n  );\n\nexport const tConvoUpdateSchema = tConversationSchema.merge(\n  z.object({\n    endpoint: extendedModelEndpointSchema.nullable(),\n    createdAt: z.string().optional(),\n    updatedAt: z.string().optional(),\n  }),\n);\n\nexport const tQueryParamsSchema = tConversationSchema\n  .pick({\n    // librechat settings\n    /** The model spec to be used */\n    spec: true,\n    /** The AI context window, overrides the system-defined window as determined by `model` value */\n    maxContextTokens: true,\n    /**\n     * Whether or not to re-submit files from previous messages on subsequent messages\n     * */\n    resendFiles: true,\n    /**\n     * @endpoints openAI, custom, azureOpenAI\n     *\n     * System parameter that only affects the above endpoints.\n     * Image detail for re-sizing according to OpenAI spec, defaults to `auto`\n     * */\n    imageDetail: true,\n    /**\n     * AKA Custom Instructions, dynamically added to chat history as a system message;\n     * for `bedrock` endpoint, this is used as the `system` model param if the provider uses it;\n     * for `assistants` endpoint, this is used as the `additional_instructions` model param:\n     * https://platform.openai.com/docs/api-reference/runs/createRun#runs-createrun-additional_instructions\n     * ; otherwise, a message with `system` role is added to the chat history\n     */\n    promptPrefix: true,\n    // Model parameters\n    /** @endpoints openAI, custom, azureOpenAI, google, anthropic, assistants, azureAssistants, bedrock */\n    model: true,\n    /** @endpoints openAI, custom, azureOpenAI, google, anthropic, bedrock */\n    temperature: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    presence_penalty: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    frequency_penalty: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    stop: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    top_p: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    max_tokens: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    reasoning_effort: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    reasoning_summary: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    verbosity: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    useResponsesApi: true,\n    /** @endpoints openAI, anthropic, google */\n    web_search: true,\n    /** @endpoints openAI, custom, azureOpenAI */\n    disableStreaming: true,\n    /** @endpoints google, anthropic, bedrock */\n    topP: true,\n    /** @endpoints google, anthropic */\n    topK: true,\n    /** @endpoints google, anthropic */\n    maxOutputTokens: true,\n    /** @endpoints anthropic */\n    promptCache: true,\n    thinking: true,\n    thinkingBudget: true,\n    /** @endpoints bedrock */\n    region: true,\n    /** @endpoints bedrock */\n    maxTokens: true,\n    /** @endpoints agents */\n    agent_id: true,\n    /** @endpoints assistants, azureAssistants */\n    assistant_id: true,\n    /** @endpoints assistants, azureAssistants */\n    append_current_datetime: true,\n    /**\n     * @endpoints assistants, azureAssistants\n     *\n     * Overrides existing assistant instructions, only used for the current run:\n     * https://platform.openai.com/docs/api-reference/runs/createRun#runs-createrun-instructions\n     * */\n    instructions: true,\n  })\n  .merge(\n    z.object({\n      /** @endpoints openAI, custom, azureOpenAI, google, anthropic, assistants, azureAssistants, bedrock, agents */\n      endpoint: extendedModelEndpointSchema.nullable(),\n    }),\n  );\n\nexport type TPreset = z.infer<typeof tPresetSchema>;\n\nexport type TSetOption = (\n  param: number | string,\n) => (newValue: number | string | boolean | string[] | Partial<TPreset>) => void;\n\nexport type TConversation = z.infer<typeof tConversationSchema> & {\n  presetOverride?: Partial<TPreset>;\n  disableParams?: boolean;\n};\n\nexport const tSharedLinkSchema = z.object({\n  conversationId: z.string(),\n  shareId: z.string(),\n  messages: z.array(z.string()),\n  isPublic: z.boolean(),\n  title: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\nexport type TSharedLink = z.infer<typeof tSharedLinkSchema>;\n\nexport const tConversationTagSchema = z.object({\n  _id: z.string(),\n  user: z.string(),\n  tag: z.string(),\n  description: z.string().optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  count: z.number(),\n  position: z.number(),\n});\nexport type TConversationTag = z.infer<typeof tConversationTagSchema>;\n\nexport const googleBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  promptPrefix: true,\n  examples: true,\n  temperature: true,\n  maxOutputTokens: true,\n  artifacts: true,\n  topP: true,\n  topK: true,\n  thinking: true,\n  thinkingBudget: true,\n  web_search: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  maxContextTokens: true,\n});\n\nexport const googleSchema = googleBaseSchema\n  .transform((obj: Partial<TConversation>) => removeNullishValues(obj))\n  .catch(() => ({}));\n\n/**\n   * TODO: Map the following fields:\n  - presence_penalty -> presencePenalty\n  - frequency_penalty -> frequencyPenalty\n  - stop -> stopSequences\n   */\nexport const googleGenConfigSchema = z\n  .object({\n    maxOutputTokens: coerceNumber.optional(),\n    temperature: coerceNumber.optional(),\n    topP: coerceNumber.optional(),\n    topK: coerceNumber.optional(),\n    presencePenalty: coerceNumber.optional(),\n    frequencyPenalty: coerceNumber.optional(),\n    stopSequences: z.array(z.string()).optional(),\n    thinkingConfig: z\n      .object({\n        includeThoughts: z.boolean().optional(),\n        thinkingBudget: coerceNumber.optional(),\n      })\n      .optional(),\n    web_search: z.boolean().optional(),\n  })\n  .strip()\n  .optional();\n\nconst gptPluginsBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  chatGptLabel: true,\n  promptPrefix: true,\n  temperature: true,\n  artifacts: true,\n  top_p: true,\n  presence_penalty: true,\n  frequency_penalty: true,\n  tools: true,\n  agentOptions: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  maxContextTokens: true,\n});\n\nexport const gptPluginsSchema = gptPluginsBaseSchema\n  .transform((obj) => {\n    const result = {\n      ...obj,\n      model: obj.model ?? 'gpt-3.5-turbo',\n      chatGptLabel: obj.chatGptLabel ?? obj.modelLabel ?? null,\n      promptPrefix: obj.promptPrefix ?? null,\n      temperature: obj.temperature ?? 0.8,\n      top_p: obj.top_p ?? 1,\n      presence_penalty: obj.presence_penalty ?? 0,\n      frequency_penalty: obj.frequency_penalty ?? 0,\n      tools: obj.tools ?? [],\n      agentOptions: obj.agentOptions ?? {\n        agent: EAgent.functions,\n        skipCompletion: true,\n        model: 'gpt-3.5-turbo',\n        temperature: 0,\n      },\n      iconURL: obj.iconURL ?? undefined,\n      greeting: obj.greeting ?? undefined,\n      spec: obj.spec ?? undefined,\n      maxContextTokens: obj.maxContextTokens ?? undefined,\n    };\n\n    if (obj.modelLabel != null && obj.modelLabel !== '') {\n      result.modelLabel = null;\n    }\n\n    return result;\n  })\n  .catch(() => ({\n    model: 'gpt-3.5-turbo',\n    chatGptLabel: null,\n    promptPrefix: null,\n    temperature: 0.8,\n    top_p: 1,\n    presence_penalty: 0,\n    frequency_penalty: 0,\n    tools: [],\n    agentOptions: {\n      agent: EAgent.functions,\n      skipCompletion: true,\n      model: 'gpt-3.5-turbo',\n      temperature: 0,\n    },\n    iconURL: undefined,\n    greeting: undefined,\n    spec: undefined,\n    maxContextTokens: undefined,\n  }));\n\nexport function removeNullishValues<T extends Record<string, unknown>>(\n  obj: T,\n  removeEmptyStrings?: boolean,\n): Partial<T> {\n  const newObj: Partial<T> = { ...obj };\n\n  (Object.keys(newObj) as Array<keyof T>).forEach((key) => {\n    const value = newObj[key];\n    if (value === undefined || value === null) {\n      delete newObj[key];\n    }\n    if (removeEmptyStrings && typeof value === 'string' && value === '') {\n      delete newObj[key];\n    }\n  });\n\n  return newObj;\n}\n\nconst assistantBaseSchema = tConversationSchema.pick({\n  model: true,\n  assistant_id: true,\n  instructions: true,\n  artifacts: true,\n  promptPrefix: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  append_current_datetime: true,\n});\n\nexport const assistantSchema = assistantBaseSchema\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? openAISettings.model.default,\n    assistant_id: obj.assistant_id ?? undefined,\n    instructions: obj.instructions ?? undefined,\n    promptPrefix: obj.promptPrefix ?? null,\n    iconURL: obj.iconURL ?? undefined,\n    greeting: obj.greeting ?? undefined,\n    spec: obj.spec ?? undefined,\n    append_current_datetime: obj.append_current_datetime ?? false,\n  }))\n  .catch(() => ({\n    model: openAISettings.model.default,\n    assistant_id: undefined,\n    instructions: undefined,\n    promptPrefix: null,\n    iconURL: undefined,\n    greeting: undefined,\n    spec: undefined,\n    append_current_datetime: false,\n  }));\n\nconst compactAssistantBaseSchema = tConversationSchema.pick({\n  model: true,\n  assistant_id: true,\n  instructions: true,\n  promptPrefix: true,\n  artifacts: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n});\n\nexport const compactAssistantSchema = compactAssistantBaseSchema\n  .transform((obj) => removeNullishValues(obj))\n  .catch(() => ({}));\n\nexport const agentsBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  temperature: true,\n  top_p: true,\n  presence_penalty: true,\n  frequency_penalty: true,\n  resendFiles: true,\n  imageDetail: true,\n  agent_id: true,\n  instructions: true,\n  promptPrefix: true,\n  iconURL: true,\n  greeting: true,\n  maxContextTokens: true,\n});\n\nexport const agentsSchema = agentsBaseSchema\n  .transform((obj) => ({\n    ...obj,\n    model: obj.model ?? agentsSettings.model.default,\n    modelLabel: obj.modelLabel ?? null,\n    temperature: obj.temperature ?? 1,\n    top_p: obj.top_p ?? 1,\n    presence_penalty: obj.presence_penalty ?? 0,\n    frequency_penalty: obj.frequency_penalty ?? 0,\n    resendFiles:\n      typeof obj.resendFiles === 'boolean' ? obj.resendFiles : agentsSettings.resendFiles.default,\n    imageDetail: obj.imageDetail ?? ImageDetail.auto,\n    agent_id: obj.agent_id ?? undefined,\n    instructions: obj.instructions ?? undefined,\n    promptPrefix: obj.promptPrefix ?? null,\n    iconURL: obj.iconURL ?? undefined,\n    greeting: obj.greeting ?? undefined,\n    maxContextTokens: obj.maxContextTokens ?? undefined,\n  }))\n  .catch(() => ({\n    model: agentsSettings.model.default,\n    modelLabel: null,\n    temperature: 1,\n    top_p: 1,\n    presence_penalty: 0,\n    frequency_penalty: 0,\n    resendFiles: agentsSettings.resendFiles.default,\n    imageDetail: ImageDetail.auto,\n    agent_id: undefined,\n    instructions: undefined,\n    promptPrefix: null,\n    iconURL: undefined,\n    greeting: undefined,\n    maxContextTokens: undefined,\n  }));\n\nexport const openAIBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  chatGptLabel: true,\n  promptPrefix: true,\n  temperature: true,\n  top_p: true,\n  presence_penalty: true,\n  frequency_penalty: true,\n  resendFiles: true,\n  artifacts: true,\n  imageDetail: true,\n  stop: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  maxContextTokens: true,\n  max_tokens: true,\n  reasoning_effort: true,\n  reasoning_summary: true,\n  verbosity: true,\n  useResponsesApi: true,\n  web_search: true,\n  disableStreaming: true,\n});\n\nexport const openAISchema = openAIBaseSchema\n  .transform((obj: Partial<TConversation>) => removeNullishValues(obj, true))\n  .catch(() => ({}));\n\nexport const compactGoogleSchema = googleBaseSchema\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.temperature === google.temperature.default) {\n      delete newObj.temperature;\n    }\n    if (newObj.maxOutputTokens === google.maxOutputTokens.default) {\n      delete newObj.maxOutputTokens;\n    }\n    if (newObj.topP === google.topP.default) {\n      delete newObj.topP;\n    }\n    if (newObj.topK === google.topK.default) {\n      delete newObj.topK;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const anthropicBaseSchema = tConversationSchema.pick({\n  model: true,\n  modelLabel: true,\n  promptPrefix: true,\n  temperature: true,\n  maxOutputTokens: true,\n  topP: true,\n  topK: true,\n  resendFiles: true,\n  promptCache: true,\n  thinking: true,\n  thinkingBudget: true,\n  artifacts: true,\n  iconURL: true,\n  greeting: true,\n  spec: true,\n  maxContextTokens: true,\n  web_search: true,\n});\n\nexport const anthropicSchema = anthropicBaseSchema\n  .transform((obj) => removeNullishValues(obj))\n  .catch(() => ({}));\n\nexport const compactPluginsSchema = gptPluginsBaseSchema\n  .transform((obj) => {\n    const newObj: Partial<TConversation> = { ...obj };\n    if (newObj.modelLabel === null) {\n      delete newObj.modelLabel;\n    }\n    if (newObj.chatGptLabel === null) {\n      delete newObj.chatGptLabel;\n    }\n    if (newObj.promptPrefix === null) {\n      delete newObj.promptPrefix;\n    }\n    if (newObj.temperature === 0.8) {\n      delete newObj.temperature;\n    }\n    if (newObj.top_p === 1) {\n      delete newObj.top_p;\n    }\n    if (newObj.presence_penalty === 0) {\n      delete newObj.presence_penalty;\n    }\n    if (newObj.frequency_penalty === 0) {\n      delete newObj.frequency_penalty;\n    }\n    if (newObj.tools?.length === 0) {\n      delete newObj.tools;\n    }\n\n    if (\n      newObj.agentOptions &&\n      newObj.agentOptions.agent === EAgent.functions &&\n      newObj.agentOptions.skipCompletion === true &&\n      newObj.agentOptions.model === 'gpt-3.5-turbo' &&\n      newObj.agentOptions.temperature === 0\n    ) {\n      delete newObj.agentOptions;\n    }\n\n    return removeNullishValues(newObj);\n  })\n  .catch(() => ({}));\n\nexport const tBannerSchema = z.object({\n  bannerId: z.string(),\n  message: z.string(),\n  displayFrom: z.string(),\n  displayTo: z.string(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n  isPublic: z.boolean(),\n});\nexport type TBanner = z.infer<typeof tBannerSchema>;\n\nexport const compactAgentsBaseSchema = tConversationSchema.pick({\n  spec: true,\n  // model: true,\n  iconURL: true,\n  greeting: true,\n  agent_id: true,\n  instructions: true,\n  additional_instructions: true,\n});\n\nexport const compactAgentsSchema = compactAgentsBaseSchema\n  .transform((obj) => removeNullishValues(obj))\n  .catch(() => ({}));\n","import { z } from 'zod';\nimport type { TPreset } from './schemas';\nimport {\n  EModelEndpoint,\n  tPresetSchema,\n  eModelEndpointSchema,\n  AuthType,\n  authTypeSchema,\n} from './schemas';\n\nexport type TModelSpec = {\n  name: string;\n  label: string;\n  preset: TPreset;\n  order?: number;\n  default?: boolean;\n  description?: string;\n  showIconInMenu?: boolean;\n  showIconInHeader?: boolean;\n  iconURL?: string | EModelEndpoint; // Allow using project-included icons\n  authType?: AuthType;\n};\n\nexport const tModelSpecSchema = z.object({\n  name: z.string(),\n  label: z.string(),\n  preset: tPresetSchema,\n  order: z.number().optional(),\n  default: z.boolean().optional(),\n  description: z.string().optional(),\n  showIconInMenu: z.boolean().optional(),\n  showIconInHeader: z.boolean().optional(),\n  iconURL: z.union([z.string(), eModelEndpointSchema]).optional(),\n  authType: authTypeSchema.optional(),\n});\n\nexport const specsConfigSchema = z.object({\n  enforce: z.boolean().default(false),\n  prioritize: z.boolean().default(true),\n  list: z.array(tModelSpecSchema).min(1),\n  addedEndpoints: z.array(z.union([z.string(), eModelEndpointSchema])).optional(),\n});\n\nexport type TSpecsConfig = z.infer<typeof specsConfigSchema>;\n","import { z } from 'zod';\nimport { EModelEndpoint } from './schemas';\nimport type { EndpointFileConfig, FileConfig } from './types/files';\n\nexport const supportsFiles = {\n  [EModelEndpoint.openAI]: true,\n  [EModelEndpoint.google]: true,\n  [EModelEndpoint.assistants]: true,\n  [EModelEndpoint.azureAssistants]: true,\n  [EModelEndpoint.agents]: true,\n  [EModelEndpoint.azureOpenAI]: true,\n  [EModelEndpoint.anthropic]: true,\n  [EModelEndpoint.custom]: true,\n  [EModelEndpoint.bedrock]: true,\n};\n\nexport const excelFileTypes = [\n  'application/vnd.ms-excel',\n  'application/msexcel',\n  'application/x-msexcel',\n  'application/x-ms-excel',\n  'application/x-excel',\n  'application/x-dos_ms_excel',\n  'application/xls',\n  'application/x-xls',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n];\n\nexport const fullMimeTypesList = [\n  'text/x-c',\n  'text/x-c++',\n  'application/csv',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'text/html',\n  'text/x-java',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/x-php',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'text/x-python',\n  'text/x-script.python',\n  'text/x-ruby',\n  'text/x-tex',\n  'text/plain',\n  'text/css',\n  'text/vtt',\n  'image/jpeg',\n  'text/javascript',\n  'image/gif',\n  'image/png',\n  'image/heic',\n  'image/heif',\n  'application/x-tar',\n  'application/typescript',\n  'application/xml',\n  'application/zip',\n  'image/svg',\n  'image/svg+xml',\n  ...excelFileTypes,\n];\n\nexport const codeInterpreterMimeTypesList = [\n  'text/x-c',\n  'text/x-c++',\n  'application/csv',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'text/html',\n  'text/x-java',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/x-php',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'text/x-python',\n  'text/x-script.python',\n  'text/x-ruby',\n  'text/x-tex',\n  'text/plain',\n  'text/css',\n  'image/jpeg',\n  'text/javascript',\n  'image/gif',\n  'image/png',\n  'image/heic',\n  'image/heif',\n  'application/x-tar',\n  'application/typescript',\n  'application/xml',\n  'application/zip',\n  ...excelFileTypes,\n];\n\nexport const retrievalMimeTypesList = [\n  'text/x-c',\n  'text/x-c++',\n  'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'text/html',\n  'text/x-java',\n  'application/json',\n  'text/markdown',\n  'application/pdf',\n  'text/x-php',\n  'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'text/x-python',\n  'text/x-script.python',\n  'text/x-ruby',\n  'text/x-tex',\n  'text/plain',\n];\n\nexport const imageExtRegex = /\\.(jpg|jpeg|png|gif|webp|heic|heif)$/i;\n\nexport const excelMimeTypes =\n  /^application\\/(vnd\\.ms-excel|msexcel|x-msexcel|x-ms-excel|x-excel|x-dos_ms_excel|xls|x-xls|vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet)$/;\n\nexport const textMimeTypes =\n  /^(text\\/(x-c|x-csharp|tab-separated-values|x-c\\+\\+|x-h|x-java|html|markdown|x-php|x-python|x-script\\.python|x-ruby|x-tex|plain|css|vtt|javascript|csv))$/;\n\nexport const applicationMimeTypes =\n  /^(application\\/(epub\\+zip|csv|json|pdf|x-tar|typescript|vnd\\.openxmlformats-officedocument\\.(wordprocessingml\\.document|presentationml\\.presentation|spreadsheetml\\.sheet)|xml|zip))$/;\n\nexport const imageMimeTypes = /^image\\/(jpeg|gif|png|webp|heic|heif)$/;\n\nexport const supportedMimeTypes = [\n  textMimeTypes,\n  excelMimeTypes,\n  applicationMimeTypes,\n  imageMimeTypes,\n  /** Supported by LC Code Interpreter PAI */\n  /^image\\/(svg|svg\\+xml)$/,\n];\n\nexport const codeInterpreterMimeTypes = [\n  textMimeTypes,\n  excelMimeTypes,\n  applicationMimeTypes,\n  imageMimeTypes,\n];\n\nexport const codeTypeMapping: { [key: string]: string } = {\n  c: 'text/x-c',\n  cs: 'text/x-csharp',\n  cpp: 'text/x-c++',\n  h: 'text/x-h',\n  md: 'text/markdown',\n  php: 'text/x-php',\n  py: 'text/x-python',\n  rb: 'text/x-ruby',\n  tex: 'text/x-tex',\n  js: 'text/javascript',\n  sh: 'application/x-sh',\n  ts: 'application/typescript',\n  tar: 'application/x-tar',\n  zip: 'application/zip',\n  yml: 'application/x-yaml',\n  yaml: 'application/x-yaml',\n  log: 'text/plain',\n  tsv: 'text/tab-separated-values',\n};\n\nexport const retrievalMimeTypes = [\n  /^(text\\/(x-c|x-c\\+\\+|x-h|html|x-java|markdown|x-php|x-python|x-script\\.python|x-ruby|x-tex|plain|vtt|xml))$/,\n  /^(application\\/(json|pdf|vnd\\.openxmlformats-officedocument\\.(wordprocessingml\\.document|presentationml\\.presentation)))$/,\n];\n\nexport const megabyte = 1024 * 1024;\n/** Helper function to get megabytes value */\nexport const mbToBytes = (mb: number): number => mb * megabyte;\n\nconst defaultSizeLimit = mbToBytes(512);\nconst assistantsFileConfig = {\n  fileLimit: 10,\n  fileSizeLimit: defaultSizeLimit,\n  totalSizeLimit: defaultSizeLimit,\n  supportedMimeTypes,\n  disabled: false,\n};\n\nexport const fileConfig = {\n  endpoints: {\n    [EModelEndpoint.assistants]: assistantsFileConfig,\n    [EModelEndpoint.azureAssistants]: assistantsFileConfig,\n    [EModelEndpoint.agents]: assistantsFileConfig,\n    default: {\n      fileLimit: 10,\n      fileSizeLimit: defaultSizeLimit,\n      totalSizeLimit: defaultSizeLimit,\n      supportedMimeTypes,\n      disabled: false,\n    },\n  },\n  serverFileSizeLimit: defaultSizeLimit,\n  avatarSizeLimit: mbToBytes(2),\n  clientImageResize: {\n    enabled: false,\n    maxWidth: 1900,\n    maxHeight: 1900,\n    quality: 0.92,\n  },\n  checkType: function (fileType: string, supportedTypes: RegExp[] = supportedMimeTypes) {\n    return supportedTypes.some((regex) => regex.test(fileType));\n  },\n};\n\nconst supportedMimeTypesSchema = z\n  .array(z.any())\n  .optional()\n  .refine(\n    (mimeTypes) => {\n      if (!mimeTypes) {\n        return true;\n      }\n      return mimeTypes.every(\n        (mimeType) => mimeType instanceof RegExp || typeof mimeType === 'string',\n      );\n    },\n    {\n      message: 'Each mimeType must be a string or a RegExp object.',\n    },\n  );\n\nexport const endpointFileConfigSchema = z.object({\n  disabled: z.boolean().optional(),\n  fileLimit: z.number().min(0).optional(),\n  fileSizeLimit: z.number().min(0).optional(),\n  totalSizeLimit: z.number().min(0).optional(),\n  supportedMimeTypes: supportedMimeTypesSchema.optional(),\n});\n\nexport const fileConfigSchema = z.object({\n  endpoints: z.record(endpointFileConfigSchema).optional(),\n  serverFileSizeLimit: z.number().min(0).optional(),\n  avatarSizeLimit: z.number().min(0).optional(),\n  imageGeneration: z\n    .object({\n      percentage: z.number().min(0).max(100).optional(),\n      px: z.number().min(0).optional(),\n    })\n    .optional(),\n  clientImageResize: z\n    .object({\n      enabled: z.boolean().optional(),\n      maxWidth: z.number().min(0).optional(),\n      maxHeight: z.number().min(0).optional(),\n      quality: z.number().min(0).max(1).optional(),\n    })\n    .optional(),\n});\n\n/** Helper function to safely convert string patterns to RegExp objects */\nexport const convertStringsToRegex = (patterns: string[]): RegExp[] =>\n  patterns.reduce((acc: RegExp[], pattern) => {\n    try {\n      const regex = new RegExp(pattern);\n      acc.push(regex);\n    } catch (error) {\n      console.error(`Invalid regex pattern \"${pattern}\" skipped.`, error);\n    }\n    return acc;\n  }, []);\n\nexport function mergeFileConfig(dynamic: z.infer<typeof fileConfigSchema> | undefined): FileConfig {\n  const mergedConfig = fileConfig as FileConfig;\n  if (!dynamic) {\n    return mergedConfig;\n  }\n\n  if (dynamic.serverFileSizeLimit !== undefined) {\n    mergedConfig.serverFileSizeLimit = mbToBytes(dynamic.serverFileSizeLimit);\n  }\n\n  if (dynamic.avatarSizeLimit !== undefined) {\n    mergedConfig.avatarSizeLimit = mbToBytes(dynamic.avatarSizeLimit);\n  }\n\n  // Merge clientImageResize configuration\n  if (dynamic.clientImageResize !== undefined) {\n    mergedConfig.clientImageResize = {\n      ...mergedConfig.clientImageResize,\n      ...dynamic.clientImageResize,\n    };\n  }\n\n  if (!dynamic.endpoints) {\n    return mergedConfig;\n  }\n\n  for (const key in dynamic.endpoints) {\n    const dynamicEndpoint = (dynamic.endpoints as Record<string, EndpointFileConfig>)[key];\n\n    if (!mergedConfig.endpoints[key]) {\n      mergedConfig.endpoints[key] = {};\n    }\n\n    const mergedEndpoint = mergedConfig.endpoints[key];\n\n    if (dynamicEndpoint.disabled === true) {\n      mergedEndpoint.disabled = true;\n      mergedEndpoint.fileLimit = 0;\n      mergedEndpoint.fileSizeLimit = 0;\n      mergedEndpoint.totalSizeLimit = 0;\n      mergedEndpoint.supportedMimeTypes = [];\n      continue;\n    }\n\n    if (dynamicEndpoint.fileSizeLimit !== undefined) {\n      mergedEndpoint.fileSizeLimit = mbToBytes(dynamicEndpoint.fileSizeLimit);\n    }\n\n    if (dynamicEndpoint.totalSizeLimit !== undefined) {\n      mergedEndpoint.totalSizeLimit = mbToBytes(dynamicEndpoint.totalSizeLimit);\n    }\n\n    const configKeys = ['fileLimit'] as const;\n    configKeys.forEach((field) => {\n      if (dynamicEndpoint[field] !== undefined) {\n        mergedEndpoint[field] = dynamicEndpoint[field];\n      }\n    });\n\n    if (dynamicEndpoint.supportedMimeTypes) {\n      mergedEndpoint.supportedMimeTypes = convertStringsToRegex(\n        dynamicEndpoint.supportedMimeTypes as unknown as string[],\n      );\n    }\n  }\n\n  return mergedConfig;\n}\n","import { EToolResources } from './assistants';\n\nexport enum FileSources {\n  local = 'local',\n  firebase = 'firebase',\n  azure = 'azure',\n  azure_blob = 'azure_blob',\n  openai = 'openai',\n  s3 = 's3',\n  vectordb = 'vectordb',\n  execute_code = 'execute_code',\n  mistral_ocr = 'mistral_ocr',\n  azure_mistral_ocr = 'azure_mistral_ocr',\n  vertexai_mistral_ocr = 'vertexai_mistral_ocr',\n  text = 'text',\n}\n\nexport const checkOpenAIStorage = (source: string) =>\n  source === FileSources.openai || source === FileSources.azure;\n\nexport enum FileContext {\n  avatar = 'avatar',\n  unknown = 'unknown',\n  agents = 'agents',\n  assistants = 'assistants',\n  execute_code = 'execute_code',\n  image_generation = 'image_generation',\n  assistants_output = 'assistants_output',\n  message_attachment = 'message_attachment',\n  filename = 'filename',\n  updatedAt = 'updatedAt',\n  source = 'source',\n  filterSource = 'filterSource',\n  context = 'context',\n  bytes = 'bytes',\n}\n\nexport type EndpointFileConfig = {\n  disabled?: boolean;\n  fileLimit?: number;\n  fileSizeLimit?: number;\n  totalSizeLimit?: number;\n  supportedMimeTypes?: RegExp[];\n};\n\nexport type FileConfig = {\n  endpoints: {\n    [key: string]: EndpointFileConfig;\n  };\n  serverFileSizeLimit?: number;\n  avatarSizeLimit?: number;\n  clientImageResize?: {\n    enabled?: boolean;\n    maxWidth?: number;\n    maxHeight?: number;\n    quality?: number;\n  };\n  checkType?: (fileType: string, supportedTypes: RegExp[]) => boolean;\n};\n\nexport type TFile = {\n  _id?: string;\n  __v?: number;\n  user: string;\n  conversationId?: string;\n  message?: string;\n  file_id: string;\n  temp_file_id?: string;\n  bytes: number;\n  embedded: boolean;\n  filename: string;\n  filepath: string;\n  object: 'file';\n  type: string;\n  usage: number;\n  context?: FileContext;\n  source?: FileSources;\n  filterSource?: FileSources;\n  width?: number;\n  height?: number;\n  expiresAt?: string | Date;\n  preview?: string;\n  metadata?: { fileIdentifier?: string };\n  createdAt?: string | Date;\n  updatedAt?: string | Date;\n};\n\nexport type TFileUpload = TFile & {\n  temp_file_id: string;\n};\n\nexport type AvatarUploadResponse = {\n  url: string;\n};\n\nexport type SpeechToTextResponse = {\n  text: string;\n};\n\nexport type VoiceResponse = string[];\n\nexport type UploadMutationOptions = {\n  onSuccess?: (data: TFileUpload, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type UploadAvatarOptions = {\n  onSuccess?: (data: AvatarUploadResponse, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type SpeechToTextOptions = {\n  onSuccess?: (data: SpeechToTextResponse, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type TextToSpeechOptions = {\n  onSuccess?: (data: ArrayBuffer, variables: FormData, context?: unknown) => void;\n  onMutate?: (variables: FormData) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\n\nexport type VoiceOptions = {\n  onSuccess?: (data: VoiceResponse, variables: unknown, context?: unknown) => void;\n  onMutate?: () => void | Promise<unknown>;\n  onError?: (error: unknown, variables: unknown, context?: unknown) => void;\n};\n\nexport type DeleteFilesResponse = {\n  message: string;\n  result: Record<string, unknown>;\n};\n\nexport type BatchFile = {\n  file_id: string;\n  filepath: string;\n  embedded: boolean;\n  source: FileSources;\n  temp_file_id?: string;\n};\n\nexport type DeleteFilesBody = {\n  files: BatchFile[];\n  agent_id?: string;\n  assistant_id?: string;\n  tool_resource?: EToolResources;\n};\n\nexport type DeleteMutationOptions = {\n  onSuccess?: (data: DeleteFilesResponse, variables: DeleteFilesBody, context?: unknown) => void;\n  onMutate?: (variables: DeleteFilesBody) => void | Promise<unknown>;\n  onError?: (error: unknown, variables: DeleteFilesBody, context?: unknown) => void;\n};\n","/* eslint-disable @typescript-eslint/no-namespace */\nimport { StepTypes, ContentTypes, ToolCallTypes } from './runs';\nimport type { TAttachment, TPlugin } from 'src/schemas';\nimport type { FunctionToolCall } from './assistants';\n\nexport namespace Agents {\n  export type MessageType = 'human' | 'ai' | 'generic' | 'system' | 'function' | 'tool' | 'remove';\n\n  export type ImageDetail = 'auto' | 'low' | 'high';\n\n  export type ReasoningContentText = {\n    type: ContentTypes.THINK;\n    think: string;\n  };\n\n  export type MessageContentText = {\n    type: ContentTypes.TEXT;\n    text: string;\n    tool_call_ids?: string[];\n  };\n\n  export type AgentUpdate = {\n    type: ContentTypes.AGENT_UPDATE;\n    agent_update: {\n      index: number;\n      runId: string;\n      agentId: string;\n    };\n  };\n\n  export type MessageContentImageUrl = {\n    type: ContentTypes.IMAGE_URL;\n    image_url: string | { url: string; detail?: ImageDetail };\n  };\n\n  export type MessageContentComplex =\n    | ReasoningContentText\n    | AgentUpdate\n    | MessageContentText\n    | MessageContentImageUrl\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    | (Record<string, any> & { type?: ContentTypes | string })\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    | (Record<string, any> & { type?: never });\n\n  export type MessageContent = string | MessageContentComplex[];\n\n  /**\n   * A call to a tool.\n   */\n  export type ToolCall = {\n    /** Type (\"tool_call\") according to Assistants Tool Call Structure */\n    type: ToolCallTypes.TOOL_CALL;\n    /** The name of the tool to be called */\n    name: string;\n\n    /** The arguments to the tool call */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    args?: string | Record<string, any>;\n\n    /** If provided, an identifier associated with the tool call */\n    id?: string;\n    /** If provided, the output of the tool call */\n    output?: string;\n    /** Auth URL */\n    auth?: string;\n    /** Expiration time */\n    expires_at?: number;\n  };\n\n  export type ToolEndEvent = {\n    /** The Step Id of the Tool Call */\n    id: string;\n    /** The Completed Tool Call */\n    tool_call?: ToolCall;\n    /** The content index of the tool call */\n    index: number;\n  };\n\n  export type ToolCallContent = {\n    type: ContentTypes.TOOL_CALL;\n    tool_call?: ToolCall;\n  };\n\n  /**\n   * A chunk of a tool call (e.g., as part of a stream).\n   * When merging ToolCallChunks (e.g., via AIMessageChunk.__add__),\n   * all string attributes are concatenated. Chunks are only merged if their\n   * values of `index` are equal and not None.\n   *\n   * @example\n   * ```ts\n   * const leftChunks = [\n   *   {\n   *     name: \"foo\",\n   *     args: '{\"a\":',\n   *     index: 0\n   *   }\n   * ];\n   *\n   * const leftAIMessageChunk = new AIMessageChunk({\n   *   content: \"\",\n   *   tool_call_chunks: leftChunks\n   * });\n   *\n   * const rightChunks = [\n   *   {\n   *     name: undefined,\n   *     args: '1}',\n   *     index: 0\n   *   }\n   * ];\n   *\n   * const rightAIMessageChunk = new AIMessageChunk({\n   *   content: \"\",\n   *   tool_call_chunks: rightChunks\n   * });\n   *\n   * const result = leftAIMessageChunk.concat(rightAIMessageChunk);\n   * // result.tool_call_chunks is equal to:\n   * // [\n   * //   {\n   * //     name: \"foo\",\n   * //     args: '{\"a\":1}'\n   * //     index: 0\n   * //   }\n   * // ]\n   * ```\n   *\n   * @property {string} [name] - If provided, a substring of the name of the tool to be called\n   * @property {string} [args] - If provided, a JSON substring of the arguments to the tool call\n   * @property {string} [id] - If provided, a substring of an identifier for the tool call\n   * @property {number} [index] - If provided, the index of the tool call in a sequence\n   */\n  export type ToolCallChunk = {\n    name?: string;\n\n    args?: string;\n\n    id?: string;\n\n    index?: number;\n\n    type?: 'tool_call_chunk';\n  };\n\n  /** Event names are of the format: on_[runnable_type]_(start|stream|end).\n\n  Runnable types are one of:\n\n  llm - used by non chat models\n  chat_model - used by chat models\n  prompt -- e.g., ChatPromptTemplate\n  tool -- LangChain tools\n  chain - most Runnables are of this type\n  Further, the events are categorized as one of:\n\n  start - when the runnable starts\n  stream - when the runnable is streaming\n  end - when the runnable ends\n  start, stream and end are associated with slightly different data payload.\n\n  Please see the documentation for EventData for more details. */\n  export type EventName = string;\n  export type RunStep = {\n    type: StepTypes;\n    id: string; // #new\n    runId?: string; // #new\n    index: number; // #new\n    stepIndex?: number; // #new\n    stepDetails: StepDetails;\n    usage: null | object;\n  };\n  /**\n   * Represents a run step delta i.e. any changed fields on a run step during\n   * streaming.\n   */\n  export interface RunStepDeltaEvent {\n    /**\n     * The identifier of the run step, which can be referenced in API endpoints.\n     */\n    id: string;\n    /**\n     * The delta containing the fields that have changed on the run step.\n     */\n    delta: ToolCallDelta;\n  }\n  export type StepDetails = MessageCreationDetails | ToolCallsDetails;\n  export type MessageCreationDetails = {\n    type: StepTypes.MESSAGE_CREATION;\n    message_creation: {\n      message_id: string;\n    };\n  };\n  export type ToolCallsDetails = {\n    type: StepTypes.TOOL_CALLS;\n    tool_calls: AgentToolCall[];\n  };\n  export type ToolCallDelta = {\n    type: StepTypes.TOOL_CALLS | string;\n    tool_calls?: ToolCallChunk[];\n    auth?: string;\n    expires_at?: number;\n  };\n  export type AgentToolCall = FunctionToolCall | ToolCall;\n  export interface ExtendedMessageContent {\n    type?: string;\n    text?: string;\n    input?: string;\n    index?: number;\n    id?: string;\n    name?: string;\n  }\n  /**\n   * Represents a message delta i.e. any changed fields on a message during\n   * streaming.\n   */\n  export interface MessageDeltaEvent {\n    /**\n     * The identifier of the message, which can be referenced in API endpoints.\n     */\n    id: string;\n    /**\n     * The delta containing the fields that have changed on the Message.\n     */\n    delta: MessageDelta;\n  }\n  /**\n   * The delta containing the fields that have changed on the Message.\n   */\n  export interface MessageDelta {\n    /**\n     * The content of the message in array of text and/or images.\n     */\n    content?: Agents.MessageContentComplex[];\n  }\n\n  /**\n   * Represents a reasoning delta i.e. any changed fields on a message during\n   * streaming.\n   */\n  export interface ReasoningDeltaEvent {\n    /**\n     * The identifier of the message, which can be referenced in API endpoints.\n     */\n    id: string;\n\n    /**\n     * The delta containing the fields that have changed.\n     */\n    delta: ReasoningDelta;\n  }\n\n  /**\n   * The reasoning delta containing the fields that have changed on the Message.\n   */\n  export interface ReasoningDelta {\n    /**\n     * The content of the message in array of text and/or images.\n     */\n    content?: MessageContentComplex[];\n  }\n\n  export type ReasoningDeltaUpdate = { type: ContentTypes.THINK; think: string };\n  export type ContentType =\n    | ContentTypes.THINK\n    | ContentTypes.TEXT\n    | ContentTypes.IMAGE_URL\n    | string;\n}\n\nexport type ToolCallResult = {\n  user: string;\n  toolId: string;\n  result?: unknown;\n  messageId: string;\n  partIndex?: number;\n  blockIndex?: number;\n  conversationId: string;\n  attachments?: TAttachment[];\n};\n\nexport enum AuthTypeEnum {\n  ServiceHttp = 'service_http',\n  OAuth = 'oauth',\n  None = 'none',\n}\n\nexport enum AuthorizationTypeEnum {\n  Bearer = 'bearer',\n  Basic = 'basic',\n  Custom = 'custom',\n}\n\nexport enum TokenExchangeMethodEnum {\n  DefaultPost = 'default_post',\n  BasicAuthHeader = 'basic_auth_header',\n}\n\nexport type Action = {\n  action_id: string;\n  type?: string;\n  settings?: Record<string, unknown>;\n  metadata: ActionMetadata;\n  version: number | string;\n} & ({ assistant_id: string; agent_id?: never } | { assistant_id?: never; agent_id: string });\n\nexport type ActionMetadata = {\n  api_key?: string;\n  auth?: ActionAuth;\n  domain?: string;\n  privacy_policy_url?: string;\n  raw_spec?: string;\n  oauth_client_id?: string;\n  oauth_client_secret?: string;\n};\n\nexport type ActionAuth = {\n  authorization_type?: AuthorizationTypeEnum;\n  custom_auth_header?: string;\n  type?: AuthTypeEnum;\n  authorization_content_type?: string;\n  authorization_url?: string;\n  client_url?: string;\n  scope?: string;\n  token_exchange_method?: TokenExchangeMethodEnum;\n};\n\nexport type ActionMetadataRuntime = ActionMetadata & {\n  oauth_access_token?: string;\n  oauth_refresh_token?: string;\n  oauth_token_expires_at?: Date;\n};\n\nexport type MCP = {\n  mcp_id: string;\n  metadata: MCPMetadata;\n} & ({ assistant_id: string; agent_id?: never } | { assistant_id?: never; agent_id: string });\n\nexport type MCPMetadata = Omit<ActionMetadata, 'auth'> & {\n  name?: string;\n  description?: string;\n  url?: string;\n  tools?: string[];\n  auth?: MCPAuth;\n  icon?: string;\n  trust?: boolean;\n};\n\nexport type MCPAuth = ActionAuth;\n\nexport type AgentToolType = {\n  tool_id: string;\n  metadata: ToolMetadata;\n} & ({ assistant_id: string; agent_id?: never } | { assistant_id?: never; agent_id: string });\n\nexport type ToolMetadata = TPlugin;\n","export const envVarRegex = /^\\${(.+)}$/;\n\n/** Extracts the environment variable name from a template literal string */\nexport function extractVariableName(value: string): string | null {\n  if (!value) {\n    return null;\n  }\n\n  const match = value.trim().match(envVarRegex);\n  return match ? match[1] : null;\n}\n\n/** Extracts the value of an environment variable from a string. */\nexport function extractEnvVariable(value: string) {\n  if (!value) {\n    return value;\n  }\n\n  // Trim the input\n  const trimmed = value.trim();\n\n  // Special case: if it's just a single environment variable\n  const singleMatch = trimmed.match(envVarRegex);\n  if (singleMatch) {\n    const varName = singleMatch[1];\n    return process.env[varName] || trimmed;\n  }\n\n  // For multiple variables, process them using a regex loop\n  const regex = /\\${([^}]+)}/g;\n  let result = trimmed;\n\n  // First collect all matches and their positions\n  const matches = [];\n  let match;\n  while ((match = regex.exec(trimmed)) !== null) {\n    matches.push({\n      fullMatch: match[0],\n      varName: match[1],\n      index: match.index,\n    });\n  }\n\n  // Process matches in reverse order to avoid position shifts\n  for (let i = matches.length - 1; i >= 0; i--) {\n    const { fullMatch, varName, index } = matches[i];\n    const envValue = process.env[varName] || fullMatch;\n\n    // Replace at exact position\n    result = result.substring(0, index) + envValue + result.substring(index + fullMatch.length);\n  }\n\n  return result;\n}\n","import { z } from 'zod';\nimport { TokenExchangeMethodEnum } from './types/agents';\nimport { extractEnvVariable } from './utils';\n\nconst BaseOptionsSchema = z.object({\n  /**\n   * Controls whether the MCP server is initialized during application startup.\n   * - true (default): Server is initialized during app startup and included in app-level connections\n   * - false: Skips initialization at startup and excludes from app-level connections - useful for servers\n   *   requiring manual authentication (e.g., GitHub PAT tokens) that need to be configured through the UI after startup\n   */\n  startup: z.boolean().optional(),\n  iconPath: z.string().optional(),\n  timeout: z.number().optional(),\n  initTimeout: z.number().optional(),\n  /** Controls visibility in chat dropdown menu (MCPSelect) */\n  chatMenu: z.boolean().optional(),\n  /**\n   * Controls server instruction behavior:\n   * - undefined/not set: No instructions included (default)\n   * - true: Use server-provided instructions\n   * - string: Use custom instructions (overrides server-provided)\n   */\n  serverInstructions: z.union([z.boolean(), z.string()]).optional(),\n  /**\n   * Whether this server requires OAuth authentication\n   * If not specified, will be auto-detected during construction\n   */\n  requiresOAuth: z.boolean().optional(),\n  /**\n   * OAuth configuration for SSE and Streamable HTTP transports\n   * - Optional: OAuth can be auto-discovered on 401 responses\n   * - Pre-configured values will skip discovery steps\n   */\n  oauth: z\n    .object({\n      /** OAuth authorization endpoint (optional - can be auto-discovered) */\n      authorization_url: z.string().url().optional(),\n      /** OAuth token endpoint (optional - can be auto-discovered) */\n      token_url: z.string().url().optional(),\n      /** OAuth client ID (optional - can use dynamic registration) */\n      client_id: z.string().optional(),\n      /** OAuth client secret (optional - can use dynamic registration) */\n      client_secret: z.string().optional(),\n      /** OAuth scopes to request */\n      scope: z.string().optional(),\n      /** OAuth redirect URI (defaults to /api/mcp/{serverName}/oauth/callback) */\n      redirect_uri: z.string().url().optional(),\n      /** Token exchange method */\n      token_exchange_method: z.nativeEnum(TokenExchangeMethodEnum).optional(),\n      /** Supported grant types (defaults to ['authorization_code', 'refresh_token']) */\n      grant_types_supported: z.array(z.string()).optional(),\n      /** Supported token endpoint authentication methods (defaults to ['client_secret_basic', 'client_secret_post']) */\n      token_endpoint_auth_methods_supported: z.array(z.string()).optional(),\n      /** Supported response types (defaults to ['code']) */\n      response_types_supported: z.array(z.string()).optional(),\n      /** Supported code challenge methods (defaults to ['S256', 'plain']) */\n      code_challenge_methods_supported: z.array(z.string()).optional(),\n    })\n    .optional(),\n  customUserVars: z\n    .record(\n      z.string(),\n      z.object({\n        title: z.string(),\n        description: z.string(),\n      }),\n    )\n    .optional(),\n});\n\nexport const StdioOptionsSchema = BaseOptionsSchema.extend({\n  type: z.literal('stdio').optional(),\n  /**\n   * The executable to run to start the server.\n   */\n  command: z.string(),\n  /**\n   * Command line arguments to pass to the executable.\n   */\n  args: z.array(z.string()),\n  /**\n   * The environment to use when spawning the process.\n   *\n   * If not specified, the result of getDefaultEnvironment() will be used.\n   * Environment variables can be referenced using ${VAR_NAME} syntax.\n   */\n  env: z\n    .record(z.string(), z.string())\n    .optional()\n    .transform((env) => {\n      if (!env) {\n        return env;\n      }\n\n      const processedEnv: Record<string, string> = {};\n      for (const [key, value] of Object.entries(env)) {\n        processedEnv[key] = extractEnvVariable(value);\n      }\n      return processedEnv;\n    }),\n  /**\n   * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n   *\n   * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n   *\n   * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n   */\n  stderr: z.any().optional(),\n});\n\nexport const WebSocketOptionsSchema = BaseOptionsSchema.extend({\n  type: z.literal('websocket').optional(),\n  url: z\n    .string()\n    .transform((val: string) => extractEnvVariable(val))\n    .pipe(z.string().url())\n    .refine(\n      (val: string) => {\n        const protocol = new URL(val).protocol;\n        return protocol === 'ws:' || protocol === 'wss:';\n      },\n      {\n        message: 'WebSocket URL must start with ws:// or wss://',\n      },\n    ),\n});\n\nexport const SSEOptionsSchema = BaseOptionsSchema.extend({\n  type: z.literal('sse').optional(),\n  headers: z.record(z.string(), z.string()).optional(),\n  url: z\n    .string()\n    .transform((val: string) => extractEnvVariable(val))\n    .pipe(z.string().url())\n    .refine(\n      (val: string) => {\n        const protocol = new URL(val).protocol;\n        return protocol !== 'ws:' && protocol !== 'wss:';\n      },\n      {\n        message: 'SSE URL must not start with ws:// or wss://',\n      },\n    ),\n});\n\nexport const StreamableHTTPOptionsSchema = BaseOptionsSchema.extend({\n  type: z.union([z.literal('streamable-http'), z.literal('http')]),\n  headers: z.record(z.string(), z.string()).optional(),\n  url: z\n    .string()\n    .transform((val: string) => extractEnvVariable(val))\n    .pipe(z.string().url())\n    .refine(\n      (val: string) => {\n        const protocol = new URL(val).protocol;\n        return protocol !== 'ws:' && protocol !== 'wss:';\n      },\n      {\n        message: 'Streamable HTTP URL must not start with ws:// or wss://',\n      },\n    ),\n});\n\nexport const MCPOptionsSchema = z.union([\n  StdioOptionsSchema,\n  WebSocketOptionsSchema,\n  SSEOptionsSchema,\n  StreamableHTTPOptionsSchema,\n]);\n\nexport const MCPServersSchema = z.record(z.string(), MCPOptionsSchema);\n\nexport type MCPOptions = z.infer<typeof MCPOptionsSchema>;\n","import { z } from 'zod';\nimport type { ZodError } from 'zod';\nimport type { TModelsConfig } from './types';\nimport { EModelEndpoint, eModelEndpointSchema } from './schemas';\nimport { specsConfigSchema, TSpecsConfig } from './models';\nimport { fileConfigSchema } from './file-config';\nimport { FileSources } from './types/files';\nimport { MCPServersSchema } from './mcp';\n\nexport const defaultSocialLogins = ['google', 'facebook', 'openid', 'github', 'discord', 'saml'];\n\nexport const defaultRetrievalModels = [\n  'gpt-4o',\n  'o1-preview-2024-09-12',\n  'o1-preview',\n  'o1-mini-2024-09-12',\n  'o1-mini',\n  'o3-mini',\n  'chatgpt-4o-latest',\n  'gpt-4o-2024-05-13',\n  'gpt-4o-2024-08-06',\n  'gpt-4o-mini',\n  'gpt-4o-mini-2024-07-18',\n  'gpt-4-turbo-preview',\n  'gpt-3.5-turbo-0125',\n  'gpt-4-0125-preview',\n  'gpt-4-1106-preview',\n  'gpt-3.5-turbo-1106',\n  'gpt-3.5-turbo-0125',\n  'gpt-4-turbo',\n  'gpt-4-0125',\n  'gpt-4-1106',\n];\n\nexport const excludedKeys = new Set([\n  'conversationId',\n  'title',\n  'iconURL',\n  'greeting',\n  'endpoint',\n  'endpointType',\n  'createdAt',\n  'updatedAt',\n  'expiredAt',\n  'messages',\n  'isArchived',\n  'tags',\n  'user',\n  '__v',\n  '_id',\n  'tools',\n  'model',\n  'files',\n  'spec',\n  'disableParams',\n]);\n\nexport enum SettingsViews {\n  default = 'default',\n  advanced = 'advanced',\n}\n\nexport const fileSourceSchema = z.nativeEnum(FileSources);\n\nexport const fileStrategiesSchema = z\n  .object({\n    default: fileSourceSchema.optional(),\n    avatar: fileSourceSchema.optional(),\n    image: fileSourceSchema.optional(),\n    document: fileSourceSchema.optional(),\n  })\n  .optional();\n\n// Helper type to extract the shape of the Zod object schema\ntype SchemaShape<T> = T extends z.ZodObject<infer U> ? U : never;\n\n// Helper type to determine the default value or undefined based on whether the field has a default\ntype DefaultValue<T> =\n  T extends z.ZodDefault<z.ZodTypeAny> ? ReturnType<T['_def']['defaultValue']> : undefined;\n\n// Extract default values or undefined from the schema shape\ntype ExtractDefaults<T> = {\n  [P in keyof T]: DefaultValue<T[P]>;\n};\n\nexport type SchemaDefaults<T> = ExtractDefaults<SchemaShape<T>>;\n\nexport type TConfigDefaults = SchemaDefaults<typeof configSchema>;\n\nexport function getSchemaDefaults<Schema extends z.AnyZodObject>(\n  schema: Schema,\n): ExtractDefaults<SchemaShape<Schema>> {\n  const shape = schema.shape;\n  const entries = Object.entries(shape).map(([key, value]) => {\n    if (value instanceof z.ZodDefault) {\n      // Extract default value if it exists\n      return [key, value._def.defaultValue()];\n    }\n    return [key, undefined];\n  });\n\n  // Create the object with the right types\n  return Object.fromEntries(entries) as ExtractDefaults<SchemaShape<Schema>>;\n}\n\nexport const modelConfigSchema = z\n  .object({\n    deploymentName: z.string().optional(),\n    version: z.string().optional(),\n    assistants: z.boolean().optional(),\n  })\n  .or(z.boolean());\n\nexport type TAzureModelConfig = z.infer<typeof modelConfigSchema>;\n\nexport const azureBaseSchema = z.object({\n  apiKey: z.string(),\n  serverless: z.boolean().optional(),\n  instanceName: z.string().optional(),\n  deploymentName: z.string().optional(),\n  assistants: z.boolean().optional(),\n  addParams: z.record(z.any()).optional(),\n  dropParams: z.array(z.string()).optional(),\n  forcePrompt: z.boolean().optional(),\n  version: z.string().optional(),\n  baseURL: z.string().optional(),\n  additionalHeaders: z.record(z.any()).optional(),\n});\n\nexport type TAzureBaseSchema = z.infer<typeof azureBaseSchema>;\n\nexport const azureGroupSchema = z\n  .object({\n    group: z.string(),\n    models: z.record(z.string(), modelConfigSchema),\n  })\n  .required()\n  .and(azureBaseSchema);\n\nexport const azureGroupConfigsSchema = z.array(azureGroupSchema).min(1);\nexport type TAzureGroup = z.infer<typeof azureGroupSchema>;\nexport type TAzureGroups = z.infer<typeof azureGroupConfigsSchema>;\nexport type TAzureModelMapSchema = {\n  // deploymentName?: string;\n  // version?: string;\n  group: string;\n};\n\nexport type TAzureModelGroupMap = Record<string, TAzureModelMapSchema | undefined>;\nexport type TAzureGroupMap = Record<\n  string,\n  (TAzureBaseSchema & { models: Record<string, TAzureModelConfig | undefined> }) | undefined\n>;\n\nexport type TValidatedAzureConfig = {\n  modelNames: string[];\n  modelGroupMap: TAzureModelGroupMap;\n  groupMap: TAzureGroupMap;\n};\n\nexport type TAzureConfigValidationResult = TValidatedAzureConfig & {\n  isValid: boolean;\n  errors: (ZodError | string)[];\n};\n\nexport enum Capabilities {\n  code_interpreter = 'code_interpreter',\n  image_vision = 'image_vision',\n  retrieval = 'retrieval',\n  actions = 'actions',\n  tools = 'tools',\n}\n\nexport enum AgentCapabilities {\n  hide_sequential_outputs = 'hide_sequential_outputs',\n  end_after_tools = 'end_after_tools',\n  execute_code = 'execute_code',\n  file_search = 'file_search',\n  web_search = 'web_search',\n  artifacts = 'artifacts',\n  actions = 'actions',\n  tools = 'tools',\n  chain = 'chain',\n  ocr = 'ocr',\n}\n\nexport const defaultAssistantsVersion = {\n  [EModelEndpoint.assistants]: 2,\n  [EModelEndpoint.azureAssistants]: 1,\n};\n\nexport const baseEndpointSchema = z.object({\n  streamRate: z.number().optional(),\n  baseURL: z.string().optional(),\n  titlePrompt: z.string().optional(),\n  titleModel: z.string().optional(),\n  titleConvo: z.boolean().optional(),\n  titleMethod: z\n    .union([z.literal('completion'), z.literal('functions'), z.literal('structured')])\n    .optional(),\n  titleEndpoint: z.string().optional(),\n  titlePromptTemplate: z.string().optional(),\n});\n\nexport type TBaseEndpoint = z.infer<typeof baseEndpointSchema>;\n\nexport const bedrockEndpointSchema = baseEndpointSchema.merge(\n  z.object({\n    availableRegions: z.array(z.string()).optional(),\n  }),\n);\n\nexport const assistantEndpointSchema = baseEndpointSchema.merge(\n  z.object({\n    /* assistants specific */\n    disableBuilder: z.boolean().optional(),\n    pollIntervalMs: z.number().optional(),\n    timeoutMs: z.number().optional(),\n    version: z.union([z.string(), z.number()]).default(2),\n    supportedIds: z.array(z.string()).min(1).optional(),\n    excludedIds: z.array(z.string()).min(1).optional(),\n    privateAssistants: z.boolean().optional(),\n    retrievalModels: z.array(z.string()).min(1).optional().default(defaultRetrievalModels),\n    capabilities: z\n      .array(z.nativeEnum(Capabilities))\n      .optional()\n      .default([\n        Capabilities.code_interpreter,\n        Capabilities.image_vision,\n        Capabilities.retrieval,\n        Capabilities.actions,\n        Capabilities.tools,\n      ]),\n    /* general */\n    apiKey: z.string().optional(),\n    models: z\n      .object({\n        default: z.array(z.string()).min(1),\n        fetch: z.boolean().optional(),\n        userIdQuery: z.boolean().optional(),\n      })\n      .optional(),\n    headers: z.record(z.any()).optional(),\n  }),\n);\n\nexport type TAssistantEndpoint = z.infer<typeof assistantEndpointSchema>;\n\nexport const defaultAgentCapabilities = [\n  AgentCapabilities.execute_code,\n  AgentCapabilities.file_search,\n  AgentCapabilities.web_search,\n  AgentCapabilities.artifacts,\n  AgentCapabilities.actions,\n  AgentCapabilities.tools,\n  AgentCapabilities.chain,\n  AgentCapabilities.ocr,\n];\n\nexport const agentsEndpointSchema = baseEndpointSchema\n  .merge(\n    z.object({\n      /* agents specific */\n      recursionLimit: z.number().optional(),\n      disableBuilder: z.boolean().optional().default(false),\n      maxRecursionLimit: z.number().optional(),\n      maxCitations: z.number().min(1).max(50).optional().default(30),\n      maxCitationsPerFile: z.number().min(1).max(10).optional().default(7),\n      minRelevanceScore: z.number().min(0.0).max(1.0).optional().default(0.45),\n      allowedProviders: z.array(z.union([z.string(), eModelEndpointSchema])).optional(),\n      capabilities: z\n        .array(z.nativeEnum(AgentCapabilities))\n        .optional()\n        .default(defaultAgentCapabilities),\n    }),\n  )\n  .default({\n    disableBuilder: false,\n    capabilities: defaultAgentCapabilities,\n    maxCitations: 30,\n    maxCitationsPerFile: 7,\n    minRelevanceScore: 0.45,\n  });\n\nexport type TAgentsEndpoint = z.infer<typeof agentsEndpointSchema>;\n\nexport const endpointSchema = baseEndpointSchema.merge(\n  z.object({\n    name: z.string().refine((value) => !eModelEndpointSchema.safeParse(value).success, {\n      message: `Value cannot be one of the default endpoint (EModelEndpoint) values: ${Object.values(\n        EModelEndpoint,\n      ).join(', ')}`,\n    }),\n    apiKey: z.string(),\n    baseURL: z.string(),\n    models: z.object({\n      default: z.array(z.string()).min(1),\n      fetch: z.boolean().optional(),\n      userIdQuery: z.boolean().optional(),\n    }),\n    summarize: z.boolean().optional(),\n    summaryModel: z.string().optional(),\n    forcePrompt: z.boolean().optional(),\n    modelDisplayLabel: z.string().optional(),\n    headers: z.record(z.any()).optional(),\n    addParams: z.record(z.any()).optional(),\n    dropParams: z.array(z.string()).optional(),\n    customParams: z\n      .object({\n        defaultParamsEndpoint: z.string().default('custom'),\n        paramDefinitions: z.array(z.record(z.any())).optional(),\n      })\n      .strict(),\n    customOrder: z.number().optional(),\n    directEndpoint: z.boolean().optional(),\n    titleMessageRole: z.string().optional(),\n  }),\n);\n\nexport type TEndpoint = z.infer<typeof endpointSchema>;\n\nexport const azureEndpointSchema = z\n  .object({\n    groups: azureGroupConfigsSchema,\n    plugins: z.boolean().optional(),\n    assistants: z.boolean().optional(),\n  })\n  .and(\n    endpointSchema\n      .pick({\n        streamRate: true,\n        titleConvo: true,\n        titleMethod: true,\n        titleModel: true,\n        titlePrompt: true,\n        titlePromptTemplate: true,\n        summarize: true,\n        summaryModel: true,\n        customOrder: true,\n      })\n      .partial(),\n  );\n\nexport type TAzureConfig = Omit<z.infer<typeof azureEndpointSchema>, 'groups'> &\n  TAzureConfigValidationResult;\n\nconst ttsOpenaiSchema = z.object({\n  url: z.string().optional(),\n  apiKey: z.string(),\n  model: z.string(),\n  voices: z.array(z.string()),\n});\n\nconst ttsAzureOpenAISchema = z.object({\n  instanceName: z.string(),\n  apiKey: z.string(),\n  deploymentName: z.string(),\n  apiVersion: z.string(),\n  model: z.string(),\n  voices: z.array(z.string()),\n});\n\nconst ttsElevenLabsSchema = z.object({\n  url: z.string().optional(),\n  websocketUrl: z.string().optional(),\n  apiKey: z.string(),\n  model: z.string(),\n  voices: z.array(z.string()),\n  voice_settings: z\n    .object({\n      similarity_boost: z.number().optional(),\n      stability: z.number().optional(),\n      style: z.number().optional(),\n      use_speaker_boost: z.boolean().optional(),\n    })\n    .optional(),\n  pronunciation_dictionary_locators: z.array(z.string()).optional(),\n});\n\nconst ttsLocalaiSchema = z.object({\n  url: z.string(),\n  apiKey: z.string().optional(),\n  voices: z.array(z.string()),\n  backend: z.string(),\n});\n\nconst ttsSchema = z.object({\n  openai: ttsOpenaiSchema.optional(),\n  azureOpenAI: ttsAzureOpenAISchema.optional(),\n  elevenlabs: ttsElevenLabsSchema.optional(),\n  localai: ttsLocalaiSchema.optional(),\n});\n\nconst sttOpenaiSchema = z.object({\n  url: z.string().optional(),\n  apiKey: z.string(),\n  model: z.string(),\n});\n\nconst sttAzureOpenAISchema = z.object({\n  instanceName: z.string(),\n  apiKey: z.string(),\n  deploymentName: z.string(),\n  apiVersion: z.string(),\n});\n\nconst sttSchema = z.object({\n  openai: sttOpenaiSchema.optional(),\n  azureOpenAI: sttAzureOpenAISchema.optional(),\n});\n\nconst speechTab = z\n  .object({\n    conversationMode: z.boolean().optional(),\n    advancedMode: z.boolean().optional(),\n    speechToText: z\n      .boolean()\n      .optional()\n      .or(\n        z.object({\n          engineSTT: z.string().optional(),\n          languageSTT: z.string().optional(),\n          autoTranscribeAudio: z.boolean().optional(),\n          decibelValue: z.number().optional(),\n          autoSendText: z.number().optional(),\n        }),\n      )\n      .optional(),\n    textToSpeech: z\n      .boolean()\n      .optional()\n      .or(\n        z.object({\n          engineTTS: z.string().optional(),\n          voice: z.string().optional(),\n          languageTTS: z.string().optional(),\n          automaticPlayback: z.boolean().optional(),\n          playbackRate: z.number().optional(),\n          cacheTTS: z.boolean().optional(),\n        }),\n      )\n      .optional(),\n  })\n  .optional();\n\nexport enum RateLimitPrefix {\n  FILE_UPLOAD = 'FILE_UPLOAD',\n  IMPORT = 'IMPORT',\n  TTS = 'TTS',\n  STT = 'STT',\n}\n\nexport const rateLimitSchema = z.object({\n  fileUploads: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n  conversationsImport: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n  tts: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n  stt: z\n    .object({\n      ipMax: z.number().optional(),\n      ipWindowInMinutes: z.number().optional(),\n      userMax: z.number().optional(),\n      userWindowInMinutes: z.number().optional(),\n    })\n    .optional(),\n});\n\nexport enum EImageOutputType {\n  PNG = 'png',\n  WEBP = 'webp',\n  JPEG = 'jpeg',\n}\n\nconst termsOfServiceSchema = z.object({\n  externalUrl: z.string().optional(),\n  openNewTab: z.boolean().optional(),\n  modalAcceptance: z.boolean().optional(),\n  modalTitle: z.string().optional(),\n  modalContent: z.string().or(z.array(z.string())).optional(),\n});\n\nexport type TTermsOfService = z.infer<typeof termsOfServiceSchema>;\n\nconst mcpServersSchema = z.object({\n  placeholder: z.string().optional(),\n});\n\nexport type TMcpServersConfig = z.infer<typeof mcpServersSchema>;\n\nexport const interfaceSchema = z\n  .object({\n    privacyPolicy: z\n      .object({\n        externalUrl: z.string().optional(),\n        openNewTab: z.boolean().optional(),\n      })\n      .optional(),\n    termsOfService: termsOfServiceSchema.optional(),\n    customWelcome: z.string().optional(),\n    mcpServers: mcpServersSchema.optional(),\n    endpointsMenu: z.boolean().optional(),\n    modelSelect: z.boolean().optional(),\n    parameters: z.boolean().optional(),\n    sidePanel: z.boolean().optional(),\n    multiConvo: z.boolean().optional(),\n    bookmarks: z.boolean().optional(),\n    memories: z.boolean().optional(),\n    presets: z.boolean().optional(),\n    prompts: z.boolean().optional(),\n    agents: z.boolean().optional(),\n    temporaryChat: z.boolean().optional(),\n    temporaryChatRetention: z.number().min(1).max(8760).optional(),\n    runCode: z.boolean().optional(),\n    webSearch: z.boolean().optional(),\n    peoplePicker: z\n      .object({\n        users: z.boolean().optional(),\n        groups: z.boolean().optional(),\n        roles: z.boolean().optional(),\n      })\n      .optional(),\n    marketplace: z\n      .object({\n        use: z.boolean().optional(),\n      })\n      .optional(),\n    fileSearch: z.boolean().optional(),\n    fileCitations: z.boolean().optional(),\n  })\n  .default({\n    endpointsMenu: true,\n    modelSelect: true,\n    parameters: true,\n    sidePanel: true,\n    presets: true,\n    multiConvo: true,\n    bookmarks: true,\n    memories: true,\n    prompts: true,\n    agents: true,\n    temporaryChat: true,\n    runCode: true,\n    webSearch: true,\n    peoplePicker: {\n      users: true,\n      groups: true,\n      roles: true,\n    },\n    marketplace: {\n      use: false,\n    },\n    fileSearch: true,\n    fileCitations: true,\n  });\n\nexport type TInterfaceConfig = z.infer<typeof interfaceSchema>;\nexport type TBalanceConfig = z.infer<typeof balanceSchema>;\n\nexport const turnstileOptionsSchema = z\n  .object({\n    language: z.string().default('auto'),\n    size: z.enum(['normal', 'compact', 'flexible', 'invisible']).default('normal'),\n  })\n  .default({\n    language: 'auto',\n    size: 'normal',\n  });\n\nexport const turnstileSchema = z.object({\n  siteKey: z.string(),\n  options: turnstileOptionsSchema.optional(),\n});\n\nexport type TTurnstileConfig = z.infer<typeof turnstileSchema>;\n\nexport type TStartupConfig = {\n  appTitle: string;\n  socialLogins?: string[];\n  interface?: TInterfaceConfig;\n  turnstile?: TTurnstileConfig;\n  balance?: TBalanceConfig;\n  discordLoginEnabled: boolean;\n  facebookLoginEnabled: boolean;\n  githubLoginEnabled: boolean;\n  googleLoginEnabled: boolean;\n  openidLoginEnabled: boolean;\n  appleLoginEnabled: boolean;\n  samlLoginEnabled: boolean;\n  openidLabel: string;\n  openidImageUrl: string;\n  openidAutoRedirect: boolean;\n  samlLabel: string;\n  samlImageUrl: string;\n  /** LDAP Auth Configuration */\n  ldap?: {\n    /** LDAP enabled */\n    enabled: boolean;\n    /** Whether LDAP uses username vs. email */\n    username?: boolean;\n  };\n  serverDomain: string;\n  emailLoginEnabled: boolean;\n  registrationEnabled: boolean;\n  socialLoginEnabled: boolean;\n  passwordResetEnabled: boolean;\n  emailEnabled: boolean;\n  showBirthdayIcon: boolean;\n  helpAndFaqURL: string;\n  customFooter?: string;\n  modelSpecs?: TSpecsConfig;\n  sharedLinksEnabled: boolean;\n  publicSharedLinksEnabled: boolean;\n  analyticsGtmId?: string;\n  instanceProjectId: string;\n  bundlerURL?: string;\n  staticBundlerURL?: string;\n  sharePointFilePickerEnabled?: boolean;\n  sharePointBaseUrl?: string;\n  sharePointPickerGraphScope?: string;\n  sharePointPickerSharePointScope?: string;\n  openidReuseTokens?: boolean;\n  webSearch?: {\n    searchProvider?: SearchProviders;\n    scraperType?: ScraperTypes;\n    rerankerType?: RerankerTypes;\n  };\n  mcpServers?: Record<\n    string,\n    {\n      customUserVars: Record<\n        string,\n        {\n          title: string;\n          description: string;\n        }\n      >;\n      chatMenu?: boolean;\n      isOAuth?: boolean;\n      startup?: boolean;\n    }\n  >;\n  mcpPlaceholder?: string;\n};\n\nexport enum OCRStrategy {\n  MISTRAL_OCR = 'mistral_ocr',\n  CUSTOM_OCR = 'custom_ocr',\n  AZURE_MISTRAL_OCR = 'azure_mistral_ocr',\n  VERTEXAI_MISTRAL_OCR = 'vertexai_mistral_ocr',\n}\n\nexport enum SearchCategories {\n  PROVIDERS = 'providers',\n  SCRAPERS = 'scrapers',\n  RERANKERS = 'rerankers',\n}\n\nexport enum SearchProviders {\n  SERPER = 'serper',\n  SEARXNG = 'searxng',\n}\n\nexport enum ScraperTypes {\n  FIRECRAWL = 'firecrawl',\n  SERPER = 'serper',\n}\n\nexport enum RerankerTypes {\n  JINA = 'jina',\n  COHERE = 'cohere',\n}\n\nexport enum SafeSearchTypes {\n  OFF = 0,\n  MODERATE = 1,\n  STRICT = 2,\n}\n\nexport const webSearchSchema = z.object({\n  serperApiKey: z.string().optional().default('${SERPER_API_KEY}'),\n  searxngInstanceUrl: z.string().optional().default('${SEARXNG_INSTANCE_URL}'),\n  searxngApiKey: z.string().optional().default('${SEARXNG_API_KEY}'),\n  firecrawlApiKey: z.string().optional().default('${FIRECRAWL_API_KEY}'),\n  firecrawlApiUrl: z.string().optional().default('${FIRECRAWL_API_URL}'),\n  jinaApiKey: z.string().optional().default('${JINA_API_KEY}'),\n  cohereApiKey: z.string().optional().default('${COHERE_API_KEY}'),\n  searchProvider: z.nativeEnum(SearchProviders).optional(),\n  scraperType: z.nativeEnum(ScraperTypes).optional(),\n  rerankerType: z.nativeEnum(RerankerTypes).optional(),\n  scraperTimeout: z.number().optional(),\n  safeSearch: z.nativeEnum(SafeSearchTypes).default(SafeSearchTypes.MODERATE),\n  firecrawlOptions: z\n    .object({\n      formats: z.array(z.string()).optional(),\n      includeTags: z.array(z.string()).optional(),\n      excludeTags: z.array(z.string()).optional(),\n      headers: z.record(z.string()).optional(),\n      waitFor: z.number().optional(),\n      timeout: z.number().optional(),\n      maxAge: z.number().optional(),\n      mobile: z.boolean().optional(),\n      skipTlsVerification: z.boolean().optional(),\n      blockAds: z.boolean().optional(),\n      removeBase64Images: z.boolean().optional(),\n      parsePDF: z.boolean().optional(),\n      storeInCache: z.boolean().optional(),\n      zeroDataRetention: z.boolean().optional(),\n      location: z\n        .object({\n          country: z.string().optional(),\n          languages: z.array(z.string()).optional(),\n        })\n        .optional(),\n      onlyMainContent: z.boolean().optional(),\n      changeTrackingOptions: z\n        .object({\n          modes: z.array(z.string()).optional(),\n          schema: z.record(z.unknown()).optional(),\n          prompt: z.string().optional(),\n          tag: z.string().nullable().optional(),\n        })\n        .optional(),\n    })\n    .optional(),\n});\n\nexport type TWebSearchConfig = z.infer<typeof webSearchSchema>;\n\nexport const ocrSchema = z.object({\n  mistralModel: z.string().optional(),\n  apiKey: z.string().optional().default('${OCR_API_KEY}'),\n  baseURL: z.string().optional().default('${OCR_BASEURL}'),\n  strategy: z.nativeEnum(OCRStrategy).default(OCRStrategy.MISTRAL_OCR),\n});\n\nexport const balanceSchema = z.object({\n  enabled: z.boolean().optional().default(false),\n  startBalance: z.number().optional().default(20000),\n  autoRefillEnabled: z.boolean().optional().default(false),\n  refillIntervalValue: z.number().optional().default(30),\n  refillIntervalUnit: z\n    .enum(['seconds', 'minutes', 'hours', 'days', 'weeks', 'months'])\n    .optional()\n    .default('days'),\n  refillAmount: z.number().optional().default(10000),\n});\n\nexport const memorySchema = z.object({\n  disabled: z.boolean().optional(),\n  validKeys: z.array(z.string()).optional(),\n  tokenLimit: z.number().optional(),\n  charLimit: z.number().optional().default(10000),\n  personalize: z.boolean().default(true),\n  messageWindowSize: z.number().optional().default(5),\n  agent: z\n    .union([\n      z.object({\n        id: z.string(),\n      }),\n      z.object({\n        provider: z.string(),\n        model: z.string(),\n        instructions: z.string().optional(),\n        model_parameters: z.record(z.any()).optional(),\n      }),\n    ])\n    .optional(),\n});\n\nexport type TMemoryConfig = z.infer<typeof memorySchema>;\n\nexport const configSchema = z.object({\n  version: z.string(),\n  cache: z.boolean().default(true),\n  ocr: ocrSchema.optional(),\n  webSearch: webSearchSchema.optional(),\n  memory: memorySchema.optional(),\n  secureImageLinks: z.boolean().optional(),\n  imageOutputType: z.nativeEnum(EImageOutputType).default(EImageOutputType.PNG),\n  includedTools: z.array(z.string()).optional(),\n  filteredTools: z.array(z.string()).optional(),\n  mcpServers: MCPServersSchema.optional(),\n  interface: interfaceSchema,\n  turnstile: turnstileSchema.optional(),\n  fileStrategy: fileSourceSchema.default(FileSources.local),\n  fileStrategies: fileStrategiesSchema,\n  actions: z\n    .object({\n      allowedDomains: z.array(z.string()).optional(),\n    })\n    .optional(),\n  registration: z\n    .object({\n      socialLogins: z.array(z.string()).optional(),\n      allowedDomains: z.array(z.string()).optional(),\n    })\n    .default({ socialLogins: defaultSocialLogins }),\n  balance: balanceSchema.optional(),\n  speech: z\n    .object({\n      tts: ttsSchema.optional(),\n      stt: sttSchema.optional(),\n      speechTab: speechTab.optional(),\n    })\n    .optional(),\n  rateLimits: rateLimitSchema.optional(),\n  fileConfig: fileConfigSchema.optional(),\n  modelSpecs: specsConfigSchema.optional(),\n  endpoints: z\n    .object({\n      all: baseEndpointSchema.optional(),\n      [EModelEndpoint.openAI]: baseEndpointSchema.optional(),\n      [EModelEndpoint.google]: baseEndpointSchema.optional(),\n      [EModelEndpoint.anthropic]: baseEndpointSchema.optional(),\n      [EModelEndpoint.gptPlugins]: baseEndpointSchema.optional(),\n      [EModelEndpoint.azureOpenAI]: azureEndpointSchema.optional(),\n      [EModelEndpoint.azureAssistants]: assistantEndpointSchema.optional(),\n      [EModelEndpoint.assistants]: assistantEndpointSchema.optional(),\n      [EModelEndpoint.agents]: agentsEndpointSchema.optional(),\n      [EModelEndpoint.custom]: z.array(endpointSchema.partial()).optional(),\n      [EModelEndpoint.bedrock]: baseEndpointSchema.optional(),\n    })\n    .strict()\n    .refine((data) => Object.keys(data).length > 0, {\n      message: 'At least one `endpoints` field must be provided.',\n    })\n    .optional(),\n});\n\nexport const getConfigDefaults = () => getSchemaDefaults(configSchema);\n\nexport type TCustomConfig = z.infer<typeof configSchema>;\n\nexport type TProviderSchema =\n  | z.infer<typeof ttsOpenaiSchema>\n  | z.infer<typeof ttsElevenLabsSchema>\n  | z.infer<typeof ttsLocalaiSchema>\n  | undefined;\n\nexport enum KnownEndpoints {\n  anyscale = 'anyscale',\n  apipie = 'apipie',\n  cohere = 'cohere',\n  fireworks = 'fireworks',\n  deepseek = 'deepseek',\n  groq = 'groq',\n  huggingface = 'huggingface',\n  mistral = 'mistral',\n  mlx = 'mlx',\n  ollama = 'ollama',\n  openrouter = 'openrouter',\n  perplexity = 'perplexity',\n  shuttleai = 'shuttleai',\n  'together.ai' = 'together.ai',\n  unify = 'unify',\n  xai = 'xai',\n}\n\nexport enum FetchTokenConfig {\n  openrouter = KnownEndpoints.openrouter,\n}\n\nexport const defaultEndpoints: EModelEndpoint[] = [\n  EModelEndpoint.openAI,\n  EModelEndpoint.assistants,\n  EModelEndpoint.azureAssistants,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.agents,\n  EModelEndpoint.chatGPTBrowser,\n  EModelEndpoint.gptPlugins,\n  EModelEndpoint.google,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.custom,\n  EModelEndpoint.bedrock,\n];\n\nexport const alternateName = {\n  [EModelEndpoint.openAI]: 'OpenAI',\n  [EModelEndpoint.assistants]: 'Assistants',\n  [EModelEndpoint.agents]: 'My Agents',\n  [EModelEndpoint.azureAssistants]: 'Azure Assistants',\n  [EModelEndpoint.azureOpenAI]: 'Azure OpenAI',\n  [EModelEndpoint.chatGPTBrowser]: 'ChatGPT',\n  [EModelEndpoint.gptPlugins]: 'Plugins',\n  [EModelEndpoint.google]: 'Google',\n  [EModelEndpoint.anthropic]: 'Anthropic',\n  [EModelEndpoint.custom]: 'Custom',\n  [EModelEndpoint.bedrock]: 'AWS Bedrock',\n  [KnownEndpoints.ollama]: 'Ollama',\n  [KnownEndpoints.deepseek]: 'DeepSeek',\n  [KnownEndpoints.xai]: 'xAI',\n};\n\nconst sharedOpenAIModels = [\n  'gpt-4o-mini',\n  'gpt-4o',\n  'gpt-4.5-preview',\n  'gpt-4.5-preview-2025-02-27',\n  'gpt-3.5-turbo',\n  'gpt-3.5-turbo-0125',\n  'gpt-4-turbo',\n  'gpt-4-turbo-2024-04-09',\n  'gpt-4-0125-preview',\n  'gpt-4-turbo-preview',\n  'gpt-4-1106-preview',\n  'gpt-3.5-turbo-1106',\n  'gpt-3.5-turbo-16k-0613',\n  'gpt-3.5-turbo-16k',\n  'gpt-4',\n  'gpt-4-0314',\n  'gpt-4-32k-0314',\n  'gpt-4-0613',\n  'gpt-3.5-turbo-0613',\n];\n\nconst sharedAnthropicModels = [\n  'claude-sonnet-4-20250514',\n  'claude-sonnet-4-latest',\n  'claude-opus-4-20250514',\n  'claude-opus-4-latest',\n  'claude-3-7-sonnet-latest',\n  'claude-3-7-sonnet-20250219',\n  'claude-3-5-haiku-20241022',\n  'claude-3-5-sonnet-20241022',\n  'claude-3-5-sonnet-20240620',\n  'claude-3-5-sonnet-latest',\n  'claude-3-opus-20240229',\n  'claude-3-sonnet-20240229',\n  'claude-3-haiku-20240307',\n  'claude-2.1',\n  'claude-2',\n  'claude-1.2',\n  'claude-1',\n  'claude-1-100k',\n  'claude-instant-1',\n  'claude-instant-1-100k',\n];\n\nexport const bedrockModels = [\n  'anthropic.claude-3-5-sonnet-20241022-v2:0',\n  'anthropic.claude-3-5-sonnet-20240620-v1:0',\n  'anthropic.claude-3-5-haiku-20241022-v1:0',\n  'anthropic.claude-3-haiku-20240307-v1:0',\n  'anthropic.claude-3-opus-20240229-v1:0',\n  'anthropic.claude-3-sonnet-20240229-v1:0',\n  'anthropic.claude-v2',\n  'anthropic.claude-v2:1',\n  'anthropic.claude-instant-v1',\n  // 'cohere.command-text-v14', // no conversation history\n  // 'cohere.command-light-text-v14', // no conversation history\n  'cohere.command-r-v1:0',\n  'cohere.command-r-plus-v1:0',\n  'meta.llama2-13b-chat-v1',\n  'meta.llama2-70b-chat-v1',\n  'meta.llama3-8b-instruct-v1:0',\n  'meta.llama3-70b-instruct-v1:0',\n  'meta.llama3-1-8b-instruct-v1:0',\n  'meta.llama3-1-70b-instruct-v1:0',\n  'meta.llama3-1-405b-instruct-v1:0',\n  'mistral.mistral-7b-instruct-v0:2',\n  'mistral.mixtral-8x7b-instruct-v0:1',\n  'mistral.mistral-large-2402-v1:0',\n  'mistral.mistral-large-2407-v1:0',\n  'mistral.mistral-small-2402-v1:0',\n  'ai21.jamba-instruct-v1:0',\n  // 'ai21.j2-mid-v1', // no streaming\n  // 'ai21.j2-ultra-v1', no conversation history\n  'amazon.titan-text-lite-v1',\n  'amazon.titan-text-express-v1',\n  'amazon.titan-text-premier-v1:0',\n];\n\nexport const defaultModels = {\n  [EModelEndpoint.azureAssistants]: sharedOpenAIModels,\n  [EModelEndpoint.assistants]: [...sharedOpenAIModels, 'chatgpt-4o-latest'],\n  [EModelEndpoint.agents]: sharedOpenAIModels, // TODO: Add agent models (agentsModels)\n  [EModelEndpoint.google]: [\n    // Gemini 2.0 Models\n    'gemini-2.0-flash-001',\n    'gemini-2.0-flash-exp',\n    'gemini-2.0-flash-lite',\n    'gemini-2.0-pro-exp-02-05',\n    // Gemini 1.5 Models\n    'gemini-1.5-flash-001',\n    'gemini-1.5-flash-002',\n    'gemini-1.5-pro-001',\n    'gemini-1.5-pro-002',\n    // Gemini 1.0 Models\n    'gemini-1.0-pro-001',\n  ],\n  [EModelEndpoint.anthropic]: sharedAnthropicModels,\n  [EModelEndpoint.openAI]: [\n    ...sharedOpenAIModels,\n    'chatgpt-4o-latest',\n    'gpt-4-vision-preview',\n    'gpt-3.5-turbo-instruct-0914',\n    'gpt-3.5-turbo-instruct',\n  ],\n  [EModelEndpoint.bedrock]: bedrockModels,\n};\n\nconst fitlerAssistantModels = (str: string) => {\n  return /gpt-4|gpt-3\\\\.5/i.test(str) && !/vision|instruct/i.test(str);\n};\n\nconst openAIModels = defaultModels[EModelEndpoint.openAI];\n\nexport const initialModelsConfig: TModelsConfig = {\n  initial: [],\n  [EModelEndpoint.openAI]: openAIModels,\n  [EModelEndpoint.assistants]: openAIModels.filter(fitlerAssistantModels),\n  [EModelEndpoint.agents]: openAIModels, // TODO: Add agent models (agentsModels)\n  [EModelEndpoint.gptPlugins]: openAIModels,\n  [EModelEndpoint.azureOpenAI]: openAIModels,\n  [EModelEndpoint.chatGPTBrowser]: ['text-davinci-002-render-sha'],\n  [EModelEndpoint.google]: defaultModels[EModelEndpoint.google],\n  [EModelEndpoint.anthropic]: defaultModels[EModelEndpoint.anthropic],\n  [EModelEndpoint.bedrock]: defaultModels[EModelEndpoint.bedrock],\n};\n\nexport const EndpointURLs = {\n  [EModelEndpoint.assistants]: '/api/assistants/v2/chat',\n  [EModelEndpoint.azureAssistants]: '/api/assistants/v1/chat',\n  [EModelEndpoint.agents]: `/api/${EModelEndpoint.agents}/chat`,\n} as const;\n\nexport const modularEndpoints = new Set<EModelEndpoint | string>([\n  EModelEndpoint.gptPlugins,\n  EModelEndpoint.anthropic,\n  EModelEndpoint.google,\n  EModelEndpoint.openAI,\n  EModelEndpoint.azureOpenAI,\n  EModelEndpoint.custom,\n  EModelEndpoint.agents,\n  EModelEndpoint.bedrock,\n]);\n\nexport const supportsBalanceCheck = {\n  [EModelEndpoint.custom]: true,\n  [EModelEndpoint.openAI]: true,\n  [EModelEndpoint.anthropic]: true,\n  [EModelEndpoint.gptPlugins]: true,\n  [EModelEndpoint.assistants]: true,\n  [EModelEndpoint.agents]: true,\n  [EModelEndpoint.azureAssistants]: true,\n  [EModelEndpoint.azureOpenAI]: true,\n  [EModelEndpoint.bedrock]: true,\n};\n\nexport const visionModels = [\n  'qwen-vl',\n  'grok-vision',\n  'grok-2-vision',\n  'grok-3',\n  'gpt-4o-mini',\n  'gpt-4o',\n  'gpt-4-turbo',\n  'gpt-4-vision',\n  'o4-mini',\n  'o3',\n  'o1',\n  'gpt-4.1',\n  'gpt-4.5',\n  'llava',\n  'llava-13b',\n  'gemini-pro-vision',\n  'claude-3',\n  'gemma',\n  'gemini-exp',\n  'gemini-1.5',\n  'gemini-2',\n  'gemini-3',\n  'moondream',\n  'llama3.2-vision',\n  'llama-3.2-11b-vision',\n  'llama-3-2-11b-vision',\n  'llama-3.2-90b-vision',\n  'llama-3-2-90b-vision',\n  'llama-4',\n  'claude-opus-4',\n  'claude-sonnet-4',\n  'claude-haiku-4',\n];\nexport enum VisionModes {\n  generative = 'generative',\n  agents = 'agents',\n}\n\nexport function validateVisionModel({\n  model,\n  additionalModels = [],\n  availableModels,\n}: {\n  model: string;\n  additionalModels?: string[];\n  availableModels?: string[];\n}) {\n  if (!model) {\n    return false;\n  }\n\n  if (model.includes('gpt-4-turbo-preview') || model.includes('o1-mini')) {\n    return false;\n  }\n\n  if (availableModels && !availableModels.includes(model)) {\n    return false;\n  }\n\n  return visionModels.concat(additionalModels).some((visionModel) => model.includes(visionModel));\n}\n\nexport const imageGenTools = new Set(['dalle', 'dall-e', 'stable-diffusion', 'flux']);\n\n/**\n * Enum for collections using infinite queries\n */\nexport enum InfiniteCollections {\n  /**\n   * Collection for Prompt Groups\n   */\n  PROMPT_GROUPS = 'promptGroups',\n  /**\n   * Collection for Shared Links\n   */\n  SHARED_LINKS = 'sharedLinks',\n}\n\n/**\n * Enum for time intervals\n */\nexport enum Time {\n  ONE_DAY = 86400000,\n  ONE_HOUR = 3600000,\n  THIRTY_MINUTES = 1800000,\n  TEN_MINUTES = 600000,\n  FIVE_MINUTES = 300000,\n  THREE_MINUTES = 180000,\n  TWO_MINUTES = 120000,\n  ONE_MINUTE = 60000,\n  THIRTY_SECONDS = 30000,\n}\n\n/**\n * Enum for cache keys.\n */\nexport enum CacheKeys {\n  /**\n   * Key for the config store namespace.\n   */\n  CONFIG_STORE = 'CONFIG_STORE',\n  /**\n   * Key for the roles cache.\n   */\n  ROLES = 'ROLES',\n  /**\n   * Key for the plugins cache.\n   */\n  PLUGINS = 'PLUGINS',\n  /**\n   * Key for the title generation cache.\n   */\n  GEN_TITLE = 'GEN_TITLE',\n  /**\n   * Key for the tools cache.\n   */\n  TOOLS = 'TOOLS',\n  /**\n   * Key for the model config cache.\n   */\n  MODELS_CONFIG = 'MODELS_CONFIG',\n  /**\n   * Key for the model queries cache.\n   */\n  MODEL_QUERIES = 'MODEL_QUERIES',\n  /**\n   * Key for the default startup config cache.\n   */\n  STARTUP_CONFIG = 'STARTUP_CONFIG',\n  /**\n   * Key for the default endpoint config cache.\n   */\n  ENDPOINT_CONFIG = 'ENDPOINT_CONFIG',\n  /**\n   * Key for accessing the model token config cache.\n   */\n  TOKEN_CONFIG = 'TOKEN_CONFIG',\n  /**\n   * Key for the librechat yaml config cache.\n   */\n  LIBRECHAT_YAML_CONFIG = 'LIBRECHAT_YAML_CONFIG',\n  /**\n   * Key for the static config namespace.\n   */\n  STATIC_CONFIG = 'STATIC_CONFIG',\n  /**\n   * Key for accessing Abort Keys\n   */\n  ABORT_KEYS = 'ABORT_KEYS',\n  /**\n   * Key for the override config cache.\n   */\n  OVERRIDE_CONFIG = 'OVERRIDE_CONFIG',\n  /**\n   * Key for the bans cache.\n   */\n  BANS = 'BANS',\n  /**\n   * Key for the encoded domains cache.\n   * Used by Azure OpenAI Assistants.\n   */\n  ENCODED_DOMAINS = 'ENCODED_DOMAINS',\n  /**\n   * Key for the cached audio run Ids.\n   */\n  AUDIO_RUNS = 'AUDIO_RUNS',\n  /**\n   * Key for in-progress messages.\n   */\n  MESSAGES = 'MESSAGES',\n  /**\n   * Key for in-progress flow states.\n   */\n  FLOWS = 'FLOWS',\n  /**\n   * Key for individual MCP Tool Manifests.\n   */\n  MCP_TOOLS = 'MCP_TOOLS',\n  /**\n   * Key for pending chat requests (concurrency check)\n   */\n  PENDING_REQ = 'PENDING_REQ',\n  /**\n   * Key for s3 check intervals per user\n   */\n  S3_EXPIRY_INTERVAL = 'S3_EXPIRY_INTERVAL',\n  /**\n   * key for open id exchanged tokens\n   */\n  OPENID_EXCHANGED_TOKENS = 'OPENID_EXCHANGED_TOKENS',\n  /**\n   * Key for OpenID session.\n   */\n  OPENID_SESSION = 'OPENID_SESSION',\n  /**\n   * Key for SAML session.\n   */\n  SAML_SESSION = 'SAML_SESSION',\n}\n\n/**\n * Enum for violation types, used to identify, log, and cache violations.\n */\nexport enum ViolationTypes {\n  /**\n   * File Upload Violations (exceeding limit).\n   */\n  FILE_UPLOAD_LIMIT = 'file_upload_limit',\n  /**\n   * Illegal Model Request (not available).\n   */\n  ILLEGAL_MODEL_REQUEST = 'illegal_model_request',\n  /**\n   * Token Limit Violation.\n   */\n  TOKEN_BALANCE = 'token_balance',\n  /**\n   * An issued ban.\n   */\n  BAN = 'ban',\n  /**\n   * TTS Request Limit Violation.\n   */\n  TTS_LIMIT = 'tts_limit',\n  /**\n   * STT Request Limit Violation.\n   */\n  STT_LIMIT = 'stt_limit',\n  /**\n   * Reset Password Limit Violation.\n   */\n  RESET_PASSWORD_LIMIT = 'reset_password_limit',\n  /**\n   * Verify Email Limit Violation.\n   */\n  VERIFY_EMAIL_LIMIT = 'verify_email_limit',\n  /**\n   * Verify Conversation Access violation.\n   */\n  CONVO_ACCESS = 'convo_access',\n  /**\n   * Tool Call Limit Violation.\n   */\n  TOOL_CALL_LIMIT = 'tool_call_limit',\n  /**\n   * General violation (catch-all).\n   */\n  GENERAL = 'general',\n  /**\n   * Login attempt violations.\n   */\n  LOGINS = 'logins',\n  /**\n   * Concurrent request violations.\n   */\n  CONCURRENT = 'concurrent',\n  /**\n   * Non-browser access violations.\n   */\n  NON_BROWSER = 'non_browser',\n  /**\n   * Message limit violations.\n   */\n  MESSAGE_LIMIT = 'message_limit',\n  /**\n   * Registration violations.\n   */\n  REGISTRATIONS = 'registrations',\n}\n\n/**\n * Enum for error message types that are not \"violations\" as above, used to identify client-facing errors.\n */\nexport enum ErrorTypes {\n  /**\n   * No User-provided Key.\n   */\n  NO_USER_KEY = 'no_user_key',\n  /**\n   * Expired User-provided Key.\n   */\n  EXPIRED_USER_KEY = 'expired_user_key',\n  /**\n   * Invalid User-provided Key.\n   */\n  INVALID_USER_KEY = 'invalid_user_key',\n  /**\n   * No Base URL Provided.\n   */\n  NO_BASE_URL = 'no_base_url',\n  /**\n   * Moderation error\n   */\n  MODERATION = 'moderation',\n  /**\n   * Prompt exceeds max length\n   */\n  INPUT_LENGTH = 'INPUT_LENGTH',\n  /**\n   * Invalid request error, API rejected request\n   */\n  INVALID_REQUEST = 'invalid_request_error',\n  /**\n   * Invalid action request error, likely not on list of allowed domains\n   */\n  INVALID_ACTION = 'invalid_action_error',\n  /**\n   * Invalid request error, API rejected request\n   */\n  NO_SYSTEM_MESSAGES = 'no_system_messages',\n  /**\n   * Google provider returned an error\n   */\n  GOOGLE_ERROR = 'google_error',\n  /**\n   * Google provider does not allow custom tools with built-in tools\n   */\n  GOOGLE_TOOL_CONFLICT = 'google_tool_conflict',\n  /**\n   * Invalid Agent Provider (excluded by Admin)\n   */\n  INVALID_AGENT_PROVIDER = 'invalid_agent_provider',\n  /**\n   * Missing model selection\n   */\n  MISSING_MODEL = 'missing_model',\n  /**\n   * Models configuration not loaded\n   */\n  MODELS_NOT_LOADED = 'models_not_loaded',\n  /**\n   * Endpoint models not loaded\n   */\n  ENDPOINT_MODELS_NOT_LOADED = 'endpoint_models_not_loaded',\n  /**\n   * Generic Authentication failure\n   */\n  AUTH_FAILED = 'auth_failed',\n}\n\n/**\n * Enum for authentication keys.\n */\nexport enum AuthKeys {\n  /**\n   * Key for the Service Account to use Vertex AI.\n   */\n  GOOGLE_SERVICE_KEY = 'GOOGLE_SERVICE_KEY',\n  /**\n   * API key to use Google Generative AI.\n   *\n   * Note: this is not for Environment Variables, but to access encrypted object values.\n   */\n  GOOGLE_API_KEY = 'GOOGLE_API_KEY',\n}\n\n/**\n * Enum for Image Detail Cost.\n *\n * **Low Res Fixed Cost:** `85`\n *\n * **High Res Calculation:**\n *\n * Number of `512px` Tiles * `170` + `85` (Additional Cost)\n */\nexport enum ImageDetailCost {\n  /**\n   * Low resolution is a fixed value.\n   */\n  LOW = 85,\n  /**\n   * High resolution Cost Per Tile\n   */\n  HIGH = 170,\n  /**\n   * Additional Cost added to High Resolution Total Cost\n   */\n  // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values\n  ADDITIONAL = 85,\n}\n\n/**\n * Tab values for Settings Dialog\n */\nexport enum SettingsTabValues {\n  /**\n   * Tab for General Settings\n   */\n  GENERAL = 'general',\n  /**\n   * Tab for Chat Settings\n   */\n  CHAT = 'chat',\n  /**\n   * Tab for Speech Settings\n   */\n  SPEECH = 'speech',\n  /**\n   * Tab for Beta Features\n   */\n  BETA = 'beta',\n  /**\n   * Tab for Data Controls\n   */\n  DATA = 'data',\n  /**\n   * Tab for Balance Settings\n   */\n  BALANCE = 'balance',\n  /**\n   * Tab for Account Settings\n   */\n  ACCOUNT = 'account',\n  /**\n   * Chat input commands\n   */\n  COMMANDS = 'commands',\n  /**\n   * Tab for Personalization Settings\n   */\n  PERSONALIZATION = 'personalization',\n}\n\nexport enum STTProviders {\n  /**\n   * Provider for OpenAI STT\n   */\n  OPENAI = 'openai',\n  /**\n   * Provider for Microsoft Azure STT\n   */\n  AZURE_OPENAI = 'azureOpenAI',\n}\n\nexport enum TTSProviders {\n  /**\n   * Provider for OpenAI TTS\n   */\n  OPENAI = 'openai',\n  /**\n   * Provider for Microsoft Azure OpenAI TTS\n   */\n  AZURE_OPENAI = 'azureOpenAI',\n  /**\n   * Provider for ElevenLabs TTS\n   */\n  ELEVENLABS = 'elevenlabs',\n  /**\n   * Provider for LocalAI TTS\n   */\n  LOCALAI = 'localai',\n}\n\n/** Enum for app-wide constants */\nexport enum Constants {\n  /** Key for the app's version. */\n  VERSION = 'v0.8.0-rc2',\n  /** Key for the Custom Config's version (librechat.yaml). */\n  CONFIG_VERSION = '1.2.8',\n  /** Standard value for the first message's `parentMessageId` value, to indicate no parent exists. */\n  NO_PARENT = '00000000-0000-0000-0000-000000000000',\n  /** Standard value for the initial conversationId before a request is sent */\n  NEW_CONVO = 'new',\n  /** Standard value for the temporary conversationId after a request is sent and before the server responds */\n  PENDING_CONVO = 'PENDING',\n  /** Standard value for the conversationId used for search queries */\n  SEARCH = 'search',\n  /** Fixed, encoded domain length for Azure OpenAI Assistants Function name parsing. */\n  ENCODED_DOMAIN_LENGTH = 10,\n  /** Identifier for using current_model in multi-model requests. */\n  CURRENT_MODEL = 'current_model',\n  /** Common divider for text values */\n  COMMON_DIVIDER = '__',\n  /** Max length for commands */\n  COMMANDS_MAX_LENGTH = 56,\n  /** Default Stream Rate (ms) */\n  DEFAULT_STREAM_RATE = 1,\n  /** Saved Tag */\n  SAVED_TAG = 'Saved',\n  /** Max number of Conversation starters for Agents/Assistants */\n  MAX_CONVO_STARTERS = 4,\n  /** Global/instance Project Name */\n  GLOBAL_PROJECT_NAME = 'instance',\n  /** Delimiter for MCP tools */\n  mcp_delimiter = '_mcp_',\n  /** Prefix for MCP plugins */\n  mcp_prefix = 'mcp_',\n  /** Placeholder Agent ID for Ephemeral Agents */\n  EPHEMERAL_AGENT_ID = 'ephemeral',\n}\n\nexport enum LocalStorageKeys {\n  /** Key for the admin defined App Title */\n  APP_TITLE = 'appTitle',\n  /** Key for the last conversation setup. */\n  LAST_CONVO_SETUP = 'lastConversationSetup',\n  /** Key for the last selected model. */\n  LAST_MODEL = 'lastSelectedModel',\n  /** Key for the last selected tools. */\n  LAST_TOOLS = 'lastSelectedTools',\n  /** Key for the last selected spec by name*/\n  LAST_SPEC = 'lastSelectedSpec',\n  /** Key for temporary files to delete */\n  FILES_TO_DELETE = 'filesToDelete',\n  /** Prefix key for the last selected assistant ID by index */\n  ASST_ID_PREFIX = 'assistant_id__',\n  /** Prefix key for the last selected agent ID by index */\n  AGENT_ID_PREFIX = 'agent_id__',\n  /** Key for the last selected fork setting */\n  FORK_SETTING = 'forkSetting',\n  /** Key for remembering the last selected option, instead of manually selecting */\n  REMEMBER_FORK_OPTION = 'rememberDefaultFork',\n  /** Key for remembering the split at target fork option modifier */\n  FORK_SPLIT_AT_TARGET = 'splitAtTarget',\n  /** Key for saving text drafts */\n  TEXT_DRAFT = 'textDraft_',\n  /** Key for saving file drafts */\n  FILES_DRAFT = 'filesDraft_',\n  /** Key for last Selected Prompt Category */\n  LAST_PROMPT_CATEGORY = 'lastPromptCategory',\n  /** Key for rendering User Messages as Markdown */\n  ENABLE_USER_MSG_MARKDOWN = 'enableUserMsgMarkdown',\n  /** Key for displaying analysis tool code input */\n  SHOW_ANALYSIS_CODE = 'showAnalysisCode',\n  /** Last selected MCP values per conversation ID */\n  LAST_MCP_ = 'LAST_MCP_',\n  /** Last checked toggle for Code Interpreter API per conversation ID */\n  LAST_CODE_TOGGLE_ = 'LAST_CODE_TOGGLE_',\n  /** Last checked toggle for Web Search per conversation ID */\n  LAST_WEB_SEARCH_TOGGLE_ = 'LAST_WEB_SEARCH_TOGGLE_',\n  /** Last checked toggle for File Search per conversation ID */\n  LAST_FILE_SEARCH_TOGGLE_ = 'LAST_FILE_SEARCH_TOGGLE_',\n  /** Last checked toggle for Artifacts per conversation ID */\n  LAST_ARTIFACTS_TOGGLE_ = 'LAST_ARTIFACTS_TOGGLE_',\n  /** Key for the last selected agent provider */\n  LAST_AGENT_PROVIDER = 'lastAgentProvider',\n  /** Key for the last selected agent model */\n  LAST_AGENT_MODEL = 'lastAgentModel',\n  /** Pin state for MCP tools per conversation ID */\n  PIN_MCP_ = 'PIN_MCP_',\n  /** Pin state for Web Search per conversation ID */\n  PIN_WEB_SEARCH_ = 'PIN_WEB_SEARCH_',\n  /** Pin state for Code Interpreter per conversation ID */\n  PIN_CODE_INTERPRETER_ = 'PIN_CODE_INTERPRETER_',\n}\n\nexport enum ForkOptions {\n  /** Key for direct path option */\n  DIRECT_PATH = 'directPath',\n  /** Key for including branches */\n  INCLUDE_BRANCHES = 'includeBranches',\n  /** Key for target level fork (default) */\n  TARGET_LEVEL = 'targetLevel',\n  /** Default option */\n  DEFAULT = 'default',\n}\n\n/**\n * Enum for Cohere related constants\n */\nexport enum CohereConstants {\n  /**\n   * Cohere API Endpoint, for special handling\n   */\n  API_URL = 'https://api.cohere.ai/v1',\n  /**\n   * Role for \"USER\" messages\n   */\n  ROLE_USER = 'USER',\n  /**\n   * Role for \"SYSTEM\" messages\n   */\n  ROLE_SYSTEM = 'SYSTEM',\n  /**\n   * Role for \"CHATBOT\" messages\n   */\n  ROLE_CHATBOT = 'CHATBOT',\n  /**\n   * Title message as required by Cohere\n   */\n  TITLE_MESSAGE = 'TITLE:',\n}\n\nexport enum SystemCategories {\n  ALL = 'sys__all__sys',\n  MY_PROMPTS = 'sys__my__prompts__sys',\n  NO_CATEGORY = 'sys__no__category__sys',\n  SHARED_PROMPTS = 'sys__shared__prompts__sys',\n}\n\nexport const providerEndpointMap = {\n  [EModelEndpoint.openAI]: EModelEndpoint.openAI,\n  [EModelEndpoint.bedrock]: EModelEndpoint.bedrock,\n  [EModelEndpoint.anthropic]: EModelEndpoint.anthropic,\n  [EModelEndpoint.azureOpenAI]: EModelEndpoint.azureOpenAI,\n};\n\nexport const specialVariables = {\n  current_date: true,\n  current_user: true,\n  iso_datetime: true,\n  current_datetime: true,\n};\n\nexport type TSpecialVarLabel = `com_ui_special_var_${keyof typeof specialVariables}`;\n","import type { AssistantsEndpoint } from './schemas';\nimport * as q from './types/queries';\nimport { ResourceType } from './accessPermissions';\n\n// Testing this buildQuery function\nconst buildQuery = (params: Record<string, unknown>): string => {\n  const query = Object.entries(params)\n    .filter(([, value]) => {\n      if (Array.isArray(value)) {\n        return value.length > 0;\n      }\n      return value !== undefined && value !== null && value !== '';\n    })\n    .map(([key, value]) => {\n      if (Array.isArray(value)) {\n        return value.map((v) => `${key}=${encodeURIComponent(v)}`).join('&');\n      }\n      return `${key}=${encodeURIComponent(String(value))}`;\n    })\n    .join('&');\n  return query ? `?${query}` : '';\n};\n\nexport const health = () => '/health';\nexport const user = () => '/api/user';\n\nexport const balance = () => '/api/balance';\n\nexport const userPlugins = () => '/api/user/plugins';\n\nexport const deleteUser = () => '/api/user/delete';\n\nexport const messages = (params: q.MessagesListParams) => {\n  const { conversationId, messageId, ...rest } = params;\n\n  if (conversationId && messageId) {\n    return `/api/messages/${conversationId}/${messageId}`;\n  }\n\n  if (conversationId) {\n    return `/api/messages/${conversationId}`;\n  }\n\n  return `/api/messages${buildQuery(rest)}`;\n};\n\nconst shareRoot = '/api/share';\nexport const shareMessages = (shareId: string) => `${shareRoot}/${shareId}`;\nexport const getSharedLink = (conversationId: string) => `${shareRoot}/link/${conversationId}`;\nexport const getSharedLinks = (\n  pageSize: number,\n  isPublic: boolean,\n  sortBy: 'title' | 'createdAt',\n  sortDirection: 'asc' | 'desc',\n  search?: string,\n  cursor?: string,\n) =>\n  `${shareRoot}?pageSize=${pageSize}&isPublic=${isPublic}&sortBy=${sortBy}&sortDirection=${sortDirection}${\n    search ? `&search=${search}` : ''\n  }${cursor ? `&cursor=${cursor}` : ''}`;\nexport const createSharedLink = (conversationId: string) => `${shareRoot}/${conversationId}`;\nexport const updateSharedLink = (shareId: string) => `${shareRoot}/${shareId}`;\n\nconst keysEndpoint = '/api/keys';\n\nexport const keys = () => keysEndpoint;\n\nexport const userKeyQuery = (name: string) => `${keysEndpoint}?name=${name}`;\n\nexport const revokeUserKey = (name: string) => `${keysEndpoint}/${name}`;\n\nexport const revokeAllUserKeys = () => `${keysEndpoint}?all=true`;\n\nexport const conversationsRoot = '/api/convos';\n\nexport const conversations = (params: q.ConversationListParams) => {\n  return `${conversationsRoot}${buildQuery(params)}`;\n};\n\nexport const conversationById = (id: string) => `${conversationsRoot}/${id}`;\n\nexport const genTitle = () => `${conversationsRoot}/gen_title`;\n\nexport const updateConversation = () => `${conversationsRoot}/update`;\n\nexport const deleteConversation = () => `${conversationsRoot}`;\n\nexport const deleteAllConversation = () => `${conversationsRoot}/all`;\n\nexport const importConversation = () => `${conversationsRoot}/import`;\n\nexport const forkConversation = () => `${conversationsRoot}/fork`;\n\nexport const duplicateConversation = () => `${conversationsRoot}/duplicate`;\n\nexport const search = (q: string, cursor?: string | null) =>\n  `/api/search?q=${q}${cursor ? `&cursor=${cursor}` : ''}`;\n\nexport const searchEnabled = () => '/api/search/enable';\n\nexport const presets = () => '/api/presets';\n\nexport const deletePreset = () => '/api/presets/delete';\n\nexport const aiEndpoints = () => '/api/endpoints';\n\nexport const endpointsConfigOverride = () => '/api/endpoints/config/override';\n\nexport const models = () => '/api/models';\n\nexport const tokenizer = () => '/api/tokenizer';\n\nexport const login = () => '/api/auth/login';\n\nexport const logout = () => '/api/auth/logout';\n\nexport const register = () => '/api/auth/register';\n\nexport const loginFacebook = () => '/api/auth/facebook';\n\nexport const loginGoogle = () => '/api/auth/google';\n\nexport const refreshToken = (retry?: boolean) =>\n  `/api/auth/refresh${retry === true ? '?retry=true' : ''}`;\n\nexport const requestPasswordReset = () => '/api/auth/requestPasswordReset';\n\nexport const resetPassword = () => '/api/auth/resetPassword';\n\nexport const verifyEmail = () => '/api/user/verify';\n\nexport const resendVerificationEmail = () => '/api/user/verify/resend';\n\nexport const plugins = () => '/api/plugins';\n\nexport const mcpReinitialize = (serverName: string) => `/api/mcp/${serverName}/reinitialize`;\nexport const mcpConnectionStatus = () => '/api/mcp/connection/status';\nexport const mcpServerConnectionStatus = (serverName: string) =>\n  `/api/mcp/connection/status/${serverName}`;\nexport const mcpAuthValues = (serverName: string) => {\n  return `/api/mcp/${serverName}/auth-values`;\n};\n\nexport const cancelMCPOAuth = (serverName: string) => {\n  return `/api/mcp/oauth/cancel/${serverName}`;\n};\n\nexport const config = () => '/api/config';\n\nexport const prompts = () => '/api/prompts';\n\nexport const addPromptToGroup = (groupId: string) => `/api/prompts/groups/${groupId}/prompts`;\n\nexport const assistants = ({\n  path = '',\n  options,\n  version,\n  endpoint,\n  isAvatar,\n}: {\n  path?: string;\n  options?: object;\n  endpoint?: AssistantsEndpoint;\n  version: number | string;\n  isAvatar?: boolean;\n}) => {\n  let url = isAvatar === true ? `${images()}/assistants` : `/api/assistants/v${version}`;\n\n  if (path && path !== '') {\n    url += `/${path}`;\n  }\n\n  if (endpoint) {\n    options = {\n      ...(options ?? {}),\n      endpoint,\n    };\n  }\n\n  if (options && Object.keys(options).length > 0) {\n    const queryParams = new URLSearchParams(options as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n\n  return url;\n};\n\nexport const agents = ({ path = '', options }: { path?: string; options?: object }) => {\n  let url = '/api/agents';\n\n  if (path && path !== '') {\n    url += `/${path}`;\n  }\n\n  if (options && Object.keys(options).length > 0) {\n    const queryParams = new URLSearchParams(options as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n\n  return url;\n};\n\nexport const revertAgentVersion = (agent_id: string) => `${agents({ path: `${agent_id}/revert` })}`;\n\nexport const files = () => '/api/files';\nexport const fileUpload = () => '/api/files';\nexport const fileDelete = () => '/api/files';\nexport const fileDownload = (userId: string, fileId: string) =>\n  `/api/files/download/${userId}/${fileId}`;\nexport const fileConfig = () => '/api/files/config';\nexport const agentFiles = (agentId: string) => `/api/files/agent/${agentId}`;\n\nexport const images = () => `${files()}/images`;\n\nexport const avatar = () => `${images()}/avatar`;\n\nexport const speech = () => `${files()}/speech`;\n\nexport const speechToText = () => `${speech()}/stt`;\n\nexport const textToSpeech = () => `${speech()}/tts`;\n\nexport const textToSpeechManual = () => `${textToSpeech()}/manual`;\n\nexport const textToSpeechVoices = () => `${textToSpeech()}/voices`;\n\nexport const getCustomConfigSpeech = () => `${speech()}/config/get`;\n\nexport const getPromptGroup = (_id: string) => `${prompts()}/groups/${_id}`;\n\nexport const getPromptGroupsWithFilters = (filter: object) => {\n  let url = `${prompts()}/groups`;\n  if (Object.keys(filter).length > 0) {\n    const queryParams = new URLSearchParams(filter as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n  return url;\n};\n\nexport const getPromptsWithFilters = (filter: object) => {\n  let url = prompts();\n  if (Object.keys(filter).length > 0) {\n    const queryParams = new URLSearchParams(filter as Record<string, string>).toString();\n    url += `?${queryParams}`;\n  }\n  return url;\n};\n\nexport const getPrompt = (_id: string) => `${prompts()}/${_id}`;\n\nexport const getRandomPrompts = (limit: number, skip: number) =>\n  `${prompts()}/random?limit=${limit}&skip=${skip}`;\n\nexport const postPrompt = prompts;\n\nexport const updatePromptGroup = getPromptGroup;\n\nexport const updatePromptLabels = (_id: string) => `${getPrompt(_id)}/labels`;\n\nexport const updatePromptTag = (_id: string) => `${getPrompt(_id)}/tags/production`;\n\nexport const deletePromptGroup = getPromptGroup;\n\nexport const deletePrompt = ({ _id, groupId }: { _id: string; groupId: string }) => {\n  return `${prompts()}/${_id}?groupId=${groupId}`;\n};\n\nexport const getCategories = () => '/api/categories';\n\nexport const getAllPromptGroups = () => `${prompts()}/all`;\n\n/* Roles */\nexport const roles = () => '/api/roles';\nexport const getRole = (roleName: string) => `${roles()}/${roleName.toLowerCase()}`;\nexport const updatePromptPermissions = (roleName: string) => `${getRole(roleName)}/prompts`;\nexport const updateMemoryPermissions = (roleName: string) => `${getRole(roleName)}/memories`;\nexport const updateAgentPermissions = (roleName: string) => `${getRole(roleName)}/agents`;\nexport const updatePeoplePickerPermissions = (roleName: string) =>\n  `${getRole(roleName)}/people-picker`;\n\nexport const updateMarketplacePermissions = (roleName: string) =>\n  `${getRole(roleName)}/marketplace`;\n\n/* Conversation Tags */\nexport const conversationTags = (tag?: string) =>\n  `/api/tags${tag != null && tag ? `/${encodeURIComponent(tag)}` : ''}`;\n\nexport const conversationTagsList = (pageNumber: string, sort?: string, order?: string) =>\n  `${conversationTags()}/list?pageNumber=${pageNumber}${sort ? `&sort=${sort}` : ''}${\n    order ? `&order=${order}` : ''\n  }`;\n\nexport const addTagToConversation = (conversationId: string) =>\n  `${conversationTags()}/convo/${conversationId}`;\n\nexport const userTerms = () => '/api/user/terms';\nexport const acceptUserTerms = () => '/api/user/terms/accept';\nexport const banner = () => '/api/banner';\n\n// Message Feedback\nexport const feedback = (conversationId: string, messageId: string) =>\n  `/api/messages/${conversationId}/${messageId}/feedback`;\n\n// Two-Factor Endpoints\nexport const enableTwoFactor = () => '/api/auth/2fa/enable';\nexport const verifyTwoFactor = () => '/api/auth/2fa/verify';\nexport const confirmTwoFactor = () => '/api/auth/2fa/confirm';\nexport const disableTwoFactor = () => '/api/auth/2fa/disable';\nexport const regenerateBackupCodes = () => '/api/auth/2fa/backup/regenerate';\nexport const verifyTwoFactorTemp = () => '/api/auth/2fa/verify-temp';\n\n/* Memories */\nexport const memories = () => '/api/memories';\nexport const memory = (key: string) => `${memories()}/${encodeURIComponent(key)}`;\nexport const memoryPreferences = () => `${memories()}/preferences`;\n\nexport const searchPrincipals = (params: q.PrincipalSearchParams) => {\n  const { q: query, limit, types } = params;\n  let url = `/api/permissions/search-principals?q=${encodeURIComponent(query)}`;\n\n  if (limit !== undefined) {\n    url += `&limit=${limit}`;\n  }\n\n  if (types && types.length > 0) {\n    url += `&types=${types.join(',')}`;\n  }\n\n  return url;\n};\n\nexport const getAccessRoles = (resourceType: ResourceType) =>\n  `/api/permissions/${resourceType}/roles`;\n\nexport const getResourcePermissions = (resourceType: ResourceType, resourceId: string) =>\n  `/api/permissions/${resourceType}/${resourceId}`;\n\nexport const updateResourcePermissions = (resourceType: ResourceType, resourceId: string) =>\n  `/api/permissions/${resourceType}/${resourceId}`;\n\nexport const getEffectivePermissions = (resourceType: ResourceType, resourceId: string) =>\n  `/api/permissions/${resourceType}/${resourceId}/effective`;\n\n// SharePoint Graph API Token\nexport const graphToken = (scopes: string) =>\n  `/api/auth/graph-token?scopes=${encodeURIComponent(scopes)}`;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport * as endpoints from './api-endpoints';\nimport { setTokenHeader } from './headers-helpers';\nimport type * as t from './types';\n\nasync function _get<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.get(url, { ...options });\n  return response.data;\n}\n\nasync function _getResponse<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  return await axios.get(url, { ...options });\n}\n\nasync function _post(url: string, data?: any) {\n  const response = await axios.post(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _postMultiPart(url: string, formData: FormData, options?: AxiosRequestConfig) {\n  const response = await axios.post(url, formData, {\n    ...options,\n    headers: { 'Content-Type': 'multipart/form-data' },\n  });\n  return response.data;\n}\n\nasync function _postTTS(url: string, formData: FormData, options?: AxiosRequestConfig) {\n  const response = await axios.post(url, formData, {\n    ...options,\n    headers: { 'Content-Type': 'multipart/form-data' },\n    responseType: 'arraybuffer',\n  });\n  return response.data;\n}\n\nasync function _put(url: string, data?: any) {\n  const response = await axios.put(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nasync function _delete<T>(url: string): Promise<T> {\n  const response = await axios.delete(url);\n  return response.data;\n}\n\nasync function _deleteWithOptions<T>(url: string, options?: AxiosRequestConfig): Promise<T> {\n  const response = await axios.delete(url, { ...options });\n  return response.data;\n}\n\nasync function _patch(url: string, data?: any) {\n  const response = await axios.patch(url, JSON.stringify(data), {\n    headers: { 'Content-Type': 'application/json' },\n  });\n  return response.data;\n}\n\nlet isRefreshing = false;\nlet failedQueue: { resolve: (value?: any) => void; reject: (reason?: any) => void }[] = [];\n\nconst refreshToken = (retry?: boolean): Promise<t.TRefreshTokenResponse | undefined> =>\n  _post(endpoints.refreshToken(retry));\n\nconst dispatchTokenUpdatedEvent = (token: string) => {\n  setTokenHeader(token);\n  window.dispatchEvent(new CustomEvent('tokenUpdated', { detail: token }));\n};\n\nconst processQueue = (error: AxiosError | null, token: string | null = null) => {\n  failedQueue.forEach((prom) => {\n    if (error) {\n      prom.reject(error);\n    } else {\n      prom.resolve(token);\n    }\n  });\n  failedQueue = [];\n};\n\naxios.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n    if (!error.response) {\n      return Promise.reject(error);\n    }\n\n    if (originalRequest.url?.includes('/api/auth/2fa') === true) {\n      return Promise.reject(error);\n    }\n    if (originalRequest.url?.includes('/api/auth/logout') === true) {\n      return Promise.reject(error);\n    }\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      console.warn('401 error, refreshing token');\n      originalRequest._retry = true;\n\n      if (isRefreshing) {\n        try {\n          const token = await new Promise((resolve, reject) => {\n            failedQueue.push({ resolve, reject });\n          });\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          return await axios(originalRequest);\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      }\n\n      isRefreshing = true;\n\n      try {\n        const response = await refreshToken(\n          // Handle edge case where we get a blank screen if the initial 401 error is from a refresh token request\n          originalRequest.url?.includes('api/auth/refresh') === true ? true : false,\n        );\n\n        const token = response?.token ?? '';\n\n        if (token) {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          dispatchTokenUpdatedEvent(token);\n          processQueue(null, token);\n          return await axios(originalRequest);\n        } else if (window.location.href.includes('share/')) {\n          console.log(\n            `Refresh token failed from shared link, attempting request to ${originalRequest.url}`,\n          );\n        } else {\n          window.location.href = '/login';\n        }\n      } catch (err) {\n        processQueue(err as AxiosError, null);\n        return Promise.reject(err);\n      } finally {\n        isRefreshing = false;\n      }\n    }\n\n    return Promise.reject(error);\n  },\n);\n\nexport default {\n  get: _get,\n  getResponse: _getResponse,\n  post: _post,\n  postMultiPart: _postMultiPart,\n  postTTS: _postTTS,\n  put: _put,\n  delete: _delete,\n  deleteWithOptions: _deleteWithOptions,\n  patch: _patch,\n  refreshToken,\n  dispatchTokenUpdatedEvent,\n};\n","import axios from 'axios';\n\nexport function setAcceptLanguageHeader(value: string): void {\n  axios.defaults.headers.common['Accept-Language'] = value;\n}\n\nexport function setTokenHeader(token: string) {\n  axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n}\n","import type { AxiosResponse } from 'axios';\nimport type * as t from './types';\nimport * as endpoints from './api-endpoints';\nimport * as a from './types/assistants';\nimport * as ag from './types/agents';\nimport * as m from './types/mutations';\nimport * as q from './types/queries';\nimport * as f from './types/files';\nimport * as config from './config';\nimport request from './request';\nimport * as s from './schemas';\nimport * as r from './roles';\nimport * as permissions from './accessPermissions';\n\nexport function revokeUserKey(name: string): Promise<unknown> {\n  return request.delete(endpoints.revokeUserKey(name));\n}\n\nexport function revokeAllUserKeys(): Promise<unknown> {\n  return request.delete(endpoints.revokeAllUserKeys());\n}\n\nexport function deleteUser(): Promise<s.TPreset> {\n  return request.delete(endpoints.deleteUser());\n}\n\nexport function getSharedMessages(shareId: string): Promise<t.TSharedMessagesResponse> {\n  return request.get(endpoints.shareMessages(shareId));\n}\n\nexport const listSharedLinks = async (\n  params: q.SharedLinksListParams,\n): Promise<q.SharedLinksResponse> => {\n  const { pageSize, isPublic, sortBy, sortDirection, search, cursor } = params;\n\n  return request.get(\n    endpoints.getSharedLinks(pageSize, isPublic, sortBy, sortDirection, search, cursor),\n  );\n};\n\nexport function getSharedLink(conversationId: string): Promise<t.TSharedLinkGetResponse> {\n  return request.get(endpoints.getSharedLink(conversationId));\n}\n\nexport function createSharedLink(conversationId: string): Promise<t.TSharedLinkResponse> {\n  return request.post(endpoints.createSharedLink(conversationId));\n}\n\nexport function updateSharedLink(shareId: string): Promise<t.TSharedLinkResponse> {\n  return request.patch(endpoints.updateSharedLink(shareId));\n}\n\nexport function deleteSharedLink(shareId: string): Promise<m.TDeleteSharedLinkResponse> {\n  return request.delete(endpoints.shareMessages(shareId));\n}\n\nexport function updateUserKey(payload: t.TUpdateUserKeyRequest) {\n  const { value } = payload;\n  if (!value) {\n    throw new Error('value is required');\n  }\n\n  return request.put(endpoints.keys(), payload);\n}\n\nexport function getPresets(): Promise<s.TPreset[]> {\n  return request.get(endpoints.presets());\n}\n\nexport function createPreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function updatePreset(payload: s.TPreset): Promise<s.TPreset> {\n  return request.post(endpoints.presets(), payload);\n}\n\nexport function deletePreset(arg: s.TPreset | undefined): Promise<m.PresetDeleteResponse> {\n  return request.post(endpoints.deletePreset(), arg);\n}\n\nexport function getSearchEnabled(): Promise<boolean> {\n  return request.get(endpoints.searchEnabled());\n}\n\nexport function getUser(): Promise<t.TUser> {\n  return request.get(endpoints.user());\n}\n\nexport function getUserBalance(): Promise<t.TBalanceResponse> {\n  return request.get(endpoints.balance());\n}\n\nexport const updateTokenCount = (text: string) => {\n  return request.post(endpoints.tokenizer(), { arg: text });\n};\n\nexport const login = (payload: t.TLoginUser): Promise<t.TLoginResponse> => {\n  return request.post(endpoints.login(), payload);\n};\n\nexport const logout = (): Promise<m.TLogoutResponse> => {\n  return request.post(endpoints.logout());\n};\n\nexport const register = (payload: t.TRegisterUser) => {\n  return request.post(endpoints.register(), payload);\n};\n\nexport const userKeyQuery = (name: string): Promise<t.TCheckUserKeyResponse> =>\n  request.get(endpoints.userKeyQuery(name));\n\nexport const getLoginGoogle = () => {\n  return request.get(endpoints.loginGoogle());\n};\n\nexport const requestPasswordReset = (\n  payload: t.TRequestPasswordReset,\n): Promise<t.TRequestPasswordResetResponse> => {\n  return request.post(endpoints.requestPasswordReset(), payload);\n};\n\nexport const resetPassword = (payload: t.TResetPassword) => {\n  return request.post(endpoints.resetPassword(), payload);\n};\n\nexport const verifyEmail = (payload: t.TVerifyEmail): Promise<t.VerifyEmailResponse> => {\n  return request.post(endpoints.verifyEmail(), payload);\n};\n\nexport const resendVerificationEmail = (\n  payload: t.TResendVerificationEmail,\n): Promise<t.VerifyEmailResponse> => {\n  return request.post(endpoints.resendVerificationEmail(), payload);\n};\n\nexport const getAvailablePlugins = (): Promise<s.TPlugin[]> => {\n  return request.get(endpoints.plugins());\n};\n\nexport const updateUserPlugins = (payload: t.TUpdateUserPlugins) => {\n  return request.post(endpoints.userPlugins(), payload);\n};\n\nexport const reinitializeMCPServer = (serverName: string) => {\n  return request.post(endpoints.mcpReinitialize(serverName));\n};\n\nexport const getMCPConnectionStatus = (): Promise<q.MCPConnectionStatusResponse> => {\n  return request.get(endpoints.mcpConnectionStatus());\n};\n\nexport const getMCPServerConnectionStatus = (\n  serverName: string,\n): Promise<q.MCPServerConnectionStatusResponse> => {\n  return request.get(endpoints.mcpServerConnectionStatus(serverName));\n};\n\nexport const getMCPAuthValues = (serverName: string): Promise<q.MCPAuthValuesResponse> => {\n  return request.get(endpoints.mcpAuthValues(serverName));\n};\n\nexport function cancelMCPOAuth(serverName: string): Promise<m.CancelMCPOAuthResponse> {\n  return request.post(endpoints.cancelMCPOAuth(serverName), {});\n}\n\n/* Config */\n\nexport const getStartupConfig = (): Promise<\n  config.TStartupConfig & {\n    mcpCustomUserVars?: Record<string, { title: string; description: string }>;\n  }\n> => {\n  return request.get(endpoints.config());\n};\n\nexport const getAIEndpoints = (): Promise<t.TEndpointsConfig> => {\n  return request.get(endpoints.aiEndpoints());\n};\n\nexport const getModels = async (): Promise<t.TModelsConfig> => {\n  return request.get(endpoints.models());\n};\n\nexport const getEndpointsConfigOverride = (): Promise<unknown | boolean> => {\n  return request.get(endpoints.endpointsConfigOverride());\n};\n\n/* Assistants */\n\nexport const createAssistant = ({\n  version,\n  ...data\n}: a.AssistantCreateParams): Promise<a.Assistant> => {\n  return request.post(endpoints.assistants({ version }), data);\n};\n\nexport const getAssistantById = ({\n  endpoint,\n  assistant_id,\n  version,\n}: {\n  endpoint: s.AssistantsEndpoint;\n  assistant_id: string;\n  version: number | string | number;\n}): Promise<a.Assistant> => {\n  return request.get(\n    endpoints.assistants({\n      path: assistant_id,\n      endpoint,\n      version,\n    }),\n  );\n};\n\nexport const updateAssistant = ({\n  assistant_id,\n  data,\n  version,\n}: {\n  assistant_id: string;\n  data: a.AssistantUpdateParams;\n  version: number | string;\n}): Promise<a.Assistant> => {\n  return request.patch(\n    endpoints.assistants({\n      path: assistant_id,\n      version,\n    }),\n    data,\n  );\n};\n\nexport const deleteAssistant = ({\n  assistant_id,\n  model,\n  endpoint,\n  version,\n}: m.DeleteAssistantBody & { version: number | string }): Promise<void> => {\n  return request.delete(\n    endpoints.assistants({\n      path: assistant_id,\n      options: { model, endpoint },\n      version,\n    }),\n  );\n};\n\nexport const listAssistants = (\n  params: a.AssistantListParams,\n  version: number | string,\n): Promise<a.AssistantListResponse> => {\n  return request.get(\n    endpoints.assistants({\n      version,\n      options: params,\n    }),\n  );\n};\n\nexport function getAssistantDocs({\n  endpoint,\n  version,\n}: {\n  endpoint: s.AssistantsEndpoint | string;\n  version: number | string;\n}): Promise<a.AssistantDocument[]> {\n  if (!s.isAssistantsEndpoint(endpoint)) {\n    return Promise.resolve([]);\n  }\n  return request.get(\n    endpoints.assistants({\n      path: 'documents',\n      version,\n      options: { endpoint },\n      endpoint: endpoint as s.AssistantsEndpoint,\n    }),\n  );\n}\n\n/* Tools */\n\nexport const getAvailableTools = (\n  _endpoint: s.AssistantsEndpoint | s.EModelEndpoint.agents,\n  version?: number | string,\n): Promise<s.TPlugin[]> => {\n  let path = '';\n  if (s.isAssistantsEndpoint(_endpoint)) {\n    const endpoint = _endpoint as s.AssistantsEndpoint;\n    path = endpoints.assistants({\n      path: 'tools',\n      endpoint: endpoint,\n      version: version ?? config.defaultAssistantsVersion[endpoint],\n    });\n  } else {\n    path = endpoints.agents({\n      path: 'tools',\n    });\n  }\n\n  return request.get(path);\n};\n\nexport const getVerifyAgentToolAuth = (\n  params: q.VerifyToolAuthParams,\n): Promise<q.VerifyToolAuthResponse> => {\n  return request.get(\n    endpoints.agents({\n      path: `tools/${params.toolId}/auth`,\n    }),\n  );\n};\n\nexport const callTool = <T extends m.ToolId>({\n  toolId,\n  toolParams,\n}: {\n  toolId: T;\n  toolParams: m.ToolParams<T>;\n}): Promise<m.ToolCallResponse> => {\n  return request.post(\n    endpoints.agents({\n      path: `tools/${toolId}/call`,\n    }),\n    toolParams,\n  );\n};\n\nexport const getToolCalls = (params: q.GetToolCallParams): Promise<q.ToolCallResults> => {\n  return request.get(\n    endpoints.agents({\n      path: 'tools/calls',\n      options: params,\n    }),\n  );\n};\n\n/* Files */\n\nexport const getFiles = (): Promise<f.TFile[]> => {\n  return request.get(endpoints.files());\n};\n\nexport const getAgentFiles = (agentId: string): Promise<f.TFile[]> => {\n  return request.get(endpoints.agentFiles(agentId));\n};\n\nexport const getFileConfig = (): Promise<f.FileConfig> => {\n  return request.get(`${endpoints.files()}/config`);\n};\n\nexport const uploadImage = (\n  data: FormData,\n  signal?: AbortSignal | null,\n): Promise<f.TFileUpload> => {\n  const requestConfig = signal ? { signal } : undefined;\n  return request.postMultiPart(endpoints.images(), data, requestConfig);\n};\n\nexport const uploadFile = (data: FormData, signal?: AbortSignal | null): Promise<f.TFileUpload> => {\n  const requestConfig = signal ? { signal } : undefined;\n  return request.postMultiPart(endpoints.files(), data, requestConfig);\n};\n\n/* actions */\n\nexport const updateAction = (data: m.UpdateActionVariables): Promise<m.UpdateActionResponse> => {\n  const { assistant_id, version, ...body } = data;\n  return request.post(\n    endpoints.assistants({\n      path: `actions/${assistant_id}`,\n      version,\n    }),\n    body,\n  );\n};\n\nexport function getActions(): Promise<ag.Action[]> {\n  return request.get(\n    endpoints.agents({\n      path: 'actions',\n    }),\n  );\n}\n\nexport const deleteAction = async ({\n  assistant_id,\n  action_id,\n  model,\n  version,\n  endpoint,\n}: m.DeleteActionVariables & { version: number | string }): Promise<void> =>\n  request.delete(\n    endpoints.assistants({\n      path: `actions/${assistant_id}/${action_id}/${model}`,\n      version,\n      endpoint,\n    }),\n  );\n\n/**\n * Agents\n */\n\nexport const createAgent = ({ ...data }: a.AgentCreateParams): Promise<a.Agent> => {\n  return request.post(endpoints.agents({}), data);\n};\n\nexport const getAgentById = ({ agent_id }: { agent_id: string }): Promise<a.Agent> => {\n  return request.get(\n    endpoints.agents({\n      path: agent_id,\n    }),\n  );\n};\n\nexport const getExpandedAgentById = ({ agent_id }: { agent_id: string }): Promise<a.Agent> => {\n  return request.get(\n    endpoints.agents({\n      path: `${agent_id}/expanded`,\n    }),\n  );\n};\n\nexport const updateAgent = ({\n  agent_id,\n  data,\n}: {\n  agent_id: string;\n  data: a.AgentUpdateParams;\n}): Promise<a.Agent> => {\n  return request.patch(\n    endpoints.agents({\n      path: agent_id,\n    }),\n    data,\n  );\n};\n\nexport const duplicateAgent = ({\n  agent_id,\n}: m.DuplicateAgentBody): Promise<{ agent: a.Agent; actions: ag.Action[] }> => {\n  return request.post(\n    endpoints.agents({\n      path: `${agent_id}/duplicate`,\n    }),\n  );\n};\n\nexport const deleteAgent = ({ agent_id }: m.DeleteAgentBody): Promise<void> => {\n  return request.delete(\n    endpoints.agents({\n      path: agent_id,\n    }),\n  );\n};\n\nexport const listAgents = (params: a.AgentListParams): Promise<a.AgentListResponse> => {\n  return request.get(\n    endpoints.agents({\n      options: params,\n    }),\n  );\n};\n\nexport const revertAgentVersion = ({\n  agent_id,\n  version_index,\n}: {\n  agent_id: string;\n  version_index: number;\n}): Promise<a.Agent> => request.post(endpoints.revertAgentVersion(agent_id), { version_index });\n\n/* Marketplace */\n\n/**\n * Get agent categories with counts for marketplace tabs\n */\nexport const getAgentCategories = (): Promise<t.TMarketplaceCategory[]> => {\n  return request.get(endpoints.agents({ path: 'categories' }));\n};\n\n/**\n * Unified marketplace agents endpoint with query string controls\n */\nexport const getMarketplaceAgents = (params: {\n  requiredPermission: number;\n  category?: string;\n  search?: string;\n  limit?: number;\n  cursor?: string;\n  promoted?: 0 | 1;\n}): Promise<a.AgentListResponse> => {\n  return request.get(\n    endpoints.agents({\n      // path: 'marketplace',\n      options: params,\n    }),\n  );\n};\n\n/* Tools */\n\nexport const getAvailableAgentTools = (): Promise<s.TPlugin[]> => {\n  return request.get(\n    endpoints.agents({\n      path: 'tools',\n    }),\n  );\n};\n\n/* Actions */\n\nexport const updateAgentAction = (\n  data: m.UpdateAgentActionVariables,\n): Promise<m.UpdateAgentActionResponse> => {\n  const { agent_id, ...body } = data;\n  return request.post(\n    endpoints.agents({\n      path: `actions/${agent_id}`,\n    }),\n    body,\n  );\n};\n\nexport const deleteAgentAction = async ({\n  agent_id,\n  action_id,\n}: m.DeleteAgentActionVariables): Promise<void> =>\n  request.delete(\n    endpoints.agents({\n      path: `actions/${agent_id}/${action_id}`,\n    }),\n  );\n\n/**\n * Imports a conversations file.\n *\n * @param data - The FormData containing the file to import.\n * @returns A Promise that resolves to the import start response.\n */\nexport const importConversationsFile = (data: FormData): Promise<t.TImportResponse> => {\n  return request.postMultiPart(endpoints.importConversation(), data);\n};\n\nexport const uploadAvatar = (data: FormData): Promise<f.AvatarUploadResponse> => {\n  return request.postMultiPart(endpoints.avatar(), data);\n};\n\nexport const uploadAssistantAvatar = (data: m.AssistantAvatarVariables): Promise<a.Assistant> => {\n  return request.postMultiPart(\n    endpoints.assistants({\n      isAvatar: true,\n      path: `${data.assistant_id}/avatar`,\n      options: { model: data.model, endpoint: data.endpoint },\n      version: data.version,\n    }),\n    data.formData,\n  );\n};\n\nexport const uploadAgentAvatar = (data: m.AgentAvatarVariables): Promise<a.Agent> => {\n  return request.postMultiPart(\n    `${endpoints.images()}/agents/${data.agent_id}/avatar`,\n    data.formData,\n  );\n};\n\nexport const getFileDownload = async (userId: string, file_id: string): Promise<AxiosResponse> => {\n  return request.getResponse(`${endpoints.files()}/download/${userId}/${file_id}`, {\n    responseType: 'blob',\n    headers: {\n      Accept: 'application/octet-stream',\n    },\n  });\n};\n\nexport const getCodeOutputDownload = async (url: string): Promise<AxiosResponse> => {\n  return request.getResponse(url, {\n    responseType: 'blob',\n    headers: {\n      Accept: 'application/octet-stream',\n    },\n  });\n};\n\nexport const deleteFiles = async (payload: {\n  files: f.BatchFile[];\n  agent_id?: string;\n  assistant_id?: string;\n  tool_resource?: a.EToolResources;\n}): Promise<f.DeleteFilesResponse> =>\n  request.deleteWithOptions(endpoints.files(), {\n    data: payload,\n  });\n\n/* Speech */\n\nexport const speechToText = (data: FormData): Promise<f.SpeechToTextResponse> => {\n  return request.postMultiPart(endpoints.speechToText(), data);\n};\n\nexport const textToSpeech = (data: FormData): Promise<ArrayBuffer> => {\n  return request.postTTS(endpoints.textToSpeechManual(), data);\n};\n\nexport const getVoices = (): Promise<f.VoiceResponse> => {\n  return request.get(endpoints.textToSpeechVoices());\n};\n\nexport const getCustomConfigSpeech = (): Promise<t.TCustomConfigSpeechResponse> => {\n  return request.get(endpoints.getCustomConfigSpeech());\n};\n\n/* conversations */\n\nexport function duplicateConversation(\n  payload: t.TDuplicateConvoRequest,\n): Promise<t.TDuplicateConvoResponse> {\n  return request.post(endpoints.duplicateConversation(), payload);\n}\n\nexport function forkConversation(payload: t.TForkConvoRequest): Promise<t.TForkConvoResponse> {\n  return request.post(endpoints.forkConversation(), payload);\n}\n\nexport function deleteConversation(payload: t.TDeleteConversationRequest) {\n  return request.deleteWithOptions(endpoints.deleteConversation(), { data: { arg: payload } });\n}\n\nexport function clearAllConversations(): Promise<unknown> {\n  return request.delete(endpoints.deleteAllConversation());\n}\n\nexport const listConversations = (\n  params?: q.ConversationListParams,\n): Promise<q.ConversationListResponse> => {\n  return request.get(endpoints.conversations(params ?? {}));\n};\n\nexport function getConversations(cursor: string): Promise<t.TGetConversationsResponse> {\n  return request.get(endpoints.conversations({ cursor }));\n}\n\nexport function getConversationById(id: string): Promise<s.TConversation> {\n  return request.get(endpoints.conversationById(id));\n}\n\nexport function updateConversation(\n  payload: t.TUpdateConversationRequest,\n): Promise<t.TUpdateConversationResponse> {\n  return request.post(endpoints.updateConversation(), { arg: payload });\n}\n\nexport function archiveConversation(\n  payload: t.TArchiveConversationRequest,\n): Promise<t.TArchiveConversationResponse> {\n  return request.post(endpoints.updateConversation(), { arg: payload });\n}\n\nexport function genTitle(payload: m.TGenTitleRequest): Promise<m.TGenTitleResponse> {\n  return request.post(endpoints.genTitle(), payload);\n}\n\nexport const listMessages = (params?: q.MessagesListParams): Promise<q.MessagesListResponse> => {\n  return request.get(endpoints.messages(params ?? {}));\n};\n\nexport function updateMessage(payload: t.TUpdateMessageRequest): Promise<unknown> {\n  const { conversationId, messageId, text } = payload;\n  if (!conversationId) {\n    throw new Error('conversationId is required');\n  }\n\n  return request.put(endpoints.messages({ conversationId, messageId }), { text });\n}\n\nexport function updateMessageContent(payload: t.TUpdateMessageContent): Promise<unknown> {\n  const { conversationId, messageId, index, text } = payload;\n  if (!conversationId) {\n    throw new Error('conversationId is required');\n  }\n\n  return request.put(endpoints.messages({ conversationId, messageId }), { text, index });\n}\n\nexport const editArtifact = async ({\n  messageId,\n  ...params\n}: m.TEditArtifactRequest): Promise<m.TEditArtifactResponse> => {\n  return request.post(`/api/messages/artifact/${messageId}`, params);\n};\n\nexport function getMessagesByConvoId(conversationId: string): Promise<s.TMessage[]> {\n  if (\n    conversationId === config.Constants.NEW_CONVO ||\n    conversationId === config.Constants.PENDING_CONVO\n  ) {\n    return Promise.resolve([]);\n  }\n  return request.get(endpoints.messages({ conversationId }));\n}\n\nexport function getPrompt(id: string): Promise<{ prompt: t.TPrompt }> {\n  return request.get(endpoints.getPrompt(id));\n}\n\nexport function getPrompts(filter: t.TPromptsWithFilterRequest): Promise<t.TPrompt[]> {\n  return request.get(endpoints.getPromptsWithFilters(filter));\n}\n\nexport function getAllPromptGroups(): Promise<q.AllPromptGroupsResponse> {\n  return request.get(endpoints.getAllPromptGroups());\n}\n\nexport function getPromptGroups(\n  filter: t.TPromptGroupsWithFilterRequest,\n): Promise<t.PromptGroupListResponse> {\n  return request.get(endpoints.getPromptGroupsWithFilters(filter));\n}\n\nexport function getPromptGroup(id: string): Promise<t.TPromptGroup> {\n  return request.get(endpoints.getPromptGroup(id));\n}\n\nexport function createPrompt(payload: t.TCreatePrompt): Promise<t.TCreatePromptResponse> {\n  return request.post(endpoints.postPrompt(), payload);\n}\n\nexport function addPromptToGroup(\n  groupId: string,\n  payload: t.TCreatePrompt,\n): Promise<t.TCreatePromptResponse> {\n  return request.post(endpoints.addPromptToGroup(groupId), payload);\n}\n\nexport function updatePromptGroup(\n  variables: t.TUpdatePromptGroupVariables,\n): Promise<t.TUpdatePromptGroupResponse> {\n  return request.patch(endpoints.updatePromptGroup(variables.id), variables.payload);\n}\n\nexport function deletePrompt(payload: t.TDeletePromptVariables): Promise<t.TDeletePromptResponse> {\n  return request.delete(endpoints.deletePrompt(payload));\n}\n\nexport function makePromptProduction(id: string): Promise<t.TMakePromptProductionResponse> {\n  return request.patch(endpoints.updatePromptTag(id));\n}\n\nexport function updatePromptLabels(\n  variables: t.TUpdatePromptLabelsRequest,\n): Promise<t.TUpdatePromptLabelsResponse> {\n  return request.patch(endpoints.updatePromptLabels(variables.id), variables.payload);\n}\n\nexport function deletePromptGroup(id: string): Promise<t.TDeletePromptGroupResponse> {\n  return request.delete(endpoints.deletePromptGroup(id));\n}\n\nexport function getCategories(): Promise<t.TGetCategoriesResponse> {\n  return request.get(endpoints.getCategories());\n}\n\nexport function getRandomPrompts(\n  variables: t.TGetRandomPromptsRequest,\n): Promise<t.TGetRandomPromptsResponse> {\n  return request.get(endpoints.getRandomPrompts(variables.limit, variables.skip));\n}\n\n/* Roles */\nexport function getRole(roleName: string): Promise<r.TRole> {\n  return request.get(endpoints.getRole(roleName));\n}\n\nexport function updatePromptPermissions(\n  variables: m.UpdatePromptPermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(endpoints.updatePromptPermissions(variables.roleName), variables.updates);\n}\n\nexport function updateAgentPermissions(\n  variables: m.UpdateAgentPermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(endpoints.updateAgentPermissions(variables.roleName), variables.updates);\n}\n\nexport function updateMemoryPermissions(\n  variables: m.UpdateMemoryPermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(endpoints.updateMemoryPermissions(variables.roleName), variables.updates);\n}\n\nexport function updatePeoplePickerPermissions(\n  variables: m.UpdatePeoplePickerPermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(\n    endpoints.updatePeoplePickerPermissions(variables.roleName),\n    variables.updates,\n  );\n}\n\nexport function updateMarketplacePermissions(\n  variables: m.UpdateMarketplacePermVars,\n): Promise<m.UpdatePermResponse> {\n  return request.put(endpoints.updateMarketplacePermissions(variables.roleName), variables.updates);\n}\n\n/* Tags */\nexport function getConversationTags(): Promise<t.TConversationTagsResponse> {\n  return request.get(endpoints.conversationTags());\n}\n\nexport function createConversationTag(\n  payload: t.TConversationTagRequest,\n): Promise<t.TConversationTagResponse> {\n  return request.post(endpoints.conversationTags(), payload);\n}\n\nexport function updateConversationTag(\n  tag: string,\n  payload: t.TConversationTagRequest,\n): Promise<t.TConversationTagResponse> {\n  return request.put(endpoints.conversationTags(tag), payload);\n}\nexport function deleteConversationTag(tag: string): Promise<t.TConversationTagResponse> {\n  return request.delete(endpoints.conversationTags(tag));\n}\n\nexport function addTagToConversation(\n  conversationId: string,\n  payload: t.TTagConversationRequest,\n): Promise<t.TTagConversationResponse> {\n  return request.put(endpoints.addTagToConversation(conversationId), payload);\n}\nexport function rebuildConversationTags(): Promise<t.TConversationTagsResponse> {\n  return request.post(endpoints.conversationTags('rebuild'));\n}\n\nexport function healthCheck(): Promise<string> {\n  return request.get(endpoints.health());\n}\n\nexport function getUserTerms(): Promise<t.TUserTermsResponse> {\n  return request.get(endpoints.userTerms());\n}\n\nexport function acceptTerms(): Promise<t.TAcceptTermsResponse> {\n  return request.post(endpoints.acceptUserTerms());\n}\n\nexport function getBanner(): Promise<t.TBannerResponse> {\n  return request.get(endpoints.banner());\n}\n\nexport function updateFeedback(\n  conversationId: string,\n  messageId: string,\n  payload: t.TUpdateFeedbackRequest,\n): Promise<t.TUpdateFeedbackResponse> {\n  return request.put(endpoints.feedback(conversationId, messageId), payload);\n}\n\n// 2FA\nexport function enableTwoFactor(): Promise<t.TEnable2FAResponse> {\n  return request.get(endpoints.enableTwoFactor());\n}\n\nexport function verifyTwoFactor(payload: t.TVerify2FARequest): Promise<t.TVerify2FAResponse> {\n  return request.post(endpoints.verifyTwoFactor(), payload);\n}\n\nexport function confirmTwoFactor(payload: t.TVerify2FARequest): Promise<t.TVerify2FAResponse> {\n  return request.post(endpoints.confirmTwoFactor(), payload);\n}\n\nexport function disableTwoFactor(payload?: t.TDisable2FARequest): Promise<t.TDisable2FAResponse> {\n  return request.post(endpoints.disableTwoFactor(), payload);\n}\n\nexport function regenerateBackupCodes(): Promise<t.TRegenerateBackupCodesResponse> {\n  return request.post(endpoints.regenerateBackupCodes());\n}\n\nexport function verifyTwoFactorTemp(\n  payload: t.TVerify2FATempRequest,\n): Promise<t.TVerify2FATempResponse> {\n  return request.post(endpoints.verifyTwoFactorTemp(), payload);\n}\n\n/* Memories */\nexport const getMemories = (): Promise<q.MemoriesResponse> => {\n  return request.get(endpoints.memories());\n};\n\nexport const deleteMemory = (key: string): Promise<void> => {\n  return request.delete(endpoints.memory(key));\n};\n\nexport const updateMemory = (\n  key: string,\n  value: string,\n  originalKey?: string,\n): Promise<q.TUserMemory> => {\n  return request.patch(endpoints.memory(originalKey || key), { key, value });\n};\n\nexport const updateMemoryPreferences = (preferences: {\n  memories: boolean;\n}): Promise<{ updated: boolean; preferences: { memories: boolean } }> => {\n  return request.patch(endpoints.memoryPreferences(), preferences);\n};\n\nexport const createMemory = (data: {\n  key: string;\n  value: string;\n}): Promise<{ created: boolean; memory: q.TUserMemory }> => {\n  return request.post(endpoints.memories(), data);\n};\n\nexport function searchPrincipals(\n  params: q.PrincipalSearchParams,\n): Promise<q.PrincipalSearchResponse> {\n  return request.get(endpoints.searchPrincipals(params));\n}\n\nexport function getAccessRoles(\n  resourceType: permissions.ResourceType,\n): Promise<q.AccessRolesResponse> {\n  return request.get(endpoints.getAccessRoles(resourceType));\n}\n\nexport function getResourcePermissions(\n  resourceType: permissions.ResourceType,\n  resourceId: string,\n): Promise<permissions.TGetResourcePermissionsResponse> {\n  return request.get(endpoints.getResourcePermissions(resourceType, resourceId));\n}\n\nexport function updateResourcePermissions(\n  resourceType: permissions.ResourceType,\n  resourceId: string,\n  data: permissions.TUpdateResourcePermissionsRequest,\n): Promise<permissions.TUpdateResourcePermissionsResponse> {\n  return request.put(endpoints.updateResourcePermissions(resourceType, resourceId), data);\n}\n\nexport function getEffectivePermissions(\n  resourceType: permissions.ResourceType,\n  resourceId: string,\n): Promise<permissions.TEffectivePermissionsResponse> {\n  return request.get(endpoints.getEffectivePermissions(resourceType, resourceId));\n}\n\n// SharePoint Graph API Token\nexport function getGraphApiToken(params: q.GraphTokenParams): Promise<q.GraphTokenResponse> {\n  return request.get(endpoints.graphToken(params.scopes));\n}\n","export enum QueryKeys {\n  messages = 'messages',\n  sharedMessages = 'sharedMessages',\n  sharedLinks = 'sharedLinks',\n  allConversations = 'allConversations',\n  archivedConversations = 'archivedConversations',\n  searchConversations = 'searchConversations',\n  conversation = 'conversation',\n  searchEnabled = 'searchEnabled',\n  user = 'user',\n  name = 'name', // user key name\n  models = 'models',\n  balance = 'balance',\n  endpoints = 'endpoints',\n  presets = 'presets',\n  searchResults = 'searchResults',\n  tokenCount = 'tokenCount',\n  availablePlugins = 'availablePlugins',\n  startupConfig = 'startupConfig',\n  assistants = 'assistants',\n  assistant = 'assistant',\n  agents = 'agents',\n  agent = 'agent',\n  endpointsConfigOverride = 'endpointsConfigOverride',\n  files = 'files',\n  fileConfig = 'fileConfig',\n  tools = 'tools',\n  toolAuth = 'toolAuth',\n  toolCalls = 'toolCalls',\n  mcpConnectionStatus = 'mcpConnectionStatus',\n  mcpAuthValues = 'mcpAuthValues',\n  agentTools = 'agentTools',\n  actions = 'actions',\n  assistantDocs = 'assistantDocs',\n  agentDocs = 'agentDocs',\n  fileDownload = 'fileDownload',\n  voices = 'voices',\n  customConfigSpeech = 'customConfigSpeech',\n  prompts = 'prompts',\n  prompt = 'prompt',\n  promptGroups = 'promptGroups',\n  allPromptGroups = 'allPromptGroups',\n  promptGroup = 'promptGroup',\n  categories = 'categories',\n  randomPrompts = 'randomPrompts',\n  agentCategories = 'agentCategories',\n  marketplaceAgents = 'marketplaceAgents',\n  roles = 'roles',\n  conversationTags = 'conversationTags',\n  health = 'health',\n  userTerms = 'userTerms',\n  banner = 'banner',\n  /* Memories */\n  memories = 'memories',\n  principalSearch = 'principalSearch',\n  accessRoles = 'accessRoles',\n  resourcePermissions = 'resourcePermissions',\n  effectivePermissions = 'effectivePermissions',\n  graphToken = 'graphToken',\n}\n\n// Dynamic query keys that require parameters\nexport const DynamicQueryKeys = {\n  agentFiles: (agentId: string) => ['agentFiles', agentId] as const,\n} as const;\n\nexport enum MutationKeys {\n  fileUpload = 'fileUpload',\n  fileDelete = 'fileDelete',\n  updatePreset = 'updatePreset',\n  deletePreset = 'deletePreset',\n  loginUser = 'loginUser',\n  logoutUser = 'logoutUser',\n  refreshToken = 'refreshToken',\n  avatarUpload = 'avatarUpload',\n  speechToText = 'speechToText',\n  textToSpeech = 'textToSpeech',\n  assistantAvatarUpload = 'assistantAvatarUpload',\n  agentAvatarUpload = 'agentAvatarUpload',\n  updateAction = 'updateAction',\n  updateAgentAction = 'updateAgentAction',\n  deleteAction = 'deleteAction',\n  deleteAgentAction = 'deleteAgentAction',\n  revertAgentVersion = 'revertAgentVersion',\n  deleteUser = 'deleteUser',\n  updateRole = 'updateRole',\n  enableTwoFactor = 'enableTwoFactor',\n  verifyTwoFactor = 'verifyTwoFactor',\n  updateMemoryPreferences = 'updateMemoryPreferences',\n}\n","import { z } from 'zod';\n\n/**\n * Granular Permission System Types for Agent Sharing\n *\n * This file contains TypeScript interfaces and Zod schemas for the enhanced\n * agent permission system that supports sharing with specific users/groups\n * and Entra ID integration.\n */\n\n// ===== ENUMS & CONSTANTS =====\n\n/**\n * Principal types for permission system\n */\nexport enum PrincipalType {\n  USER = 'user',\n  GROUP = 'group',\n  PUBLIC = 'public',\n  ROLE = 'role',\n}\n\n/**\n * Principal model types for MongoDB references\n */\nexport enum PrincipalModel {\n  USER = 'User',\n  GROUP = 'Group',\n  ROLE = 'Role',\n}\n\n/**\n * Source of the principal (local LibreChat or external Entra ID)\n */\nexport type TPrincipalSource = 'local' | 'entra';\n\n/**\n * Access levels for agents\n */\nexport type TAccessLevel = 'none' | 'viewer' | 'editor' | 'owner';\n\n/**\n * Resource types for permission system\n */\nexport enum ResourceType {\n  AGENT = 'agent',\n  PROMPTGROUP = 'promptGroup',\n}\n\n/**\n * Permission bit constants for bitwise operations\n */\nexport enum PermissionBits {\n  /** 001 - Can view and use agent */\n  VIEW = 1,\n  /**  010 - Can modify agent settings */\n  EDIT = 2,\n  /**  100 - Can delete agent */\n  DELETE = 4,\n  /**  1000 - Can share agent with others (future) */\n  SHARE = 8,\n}\n\n/**\n * Standard access role IDs\n */\nexport enum AccessRoleIds {\n  AGENT_VIEWER = 'agent_viewer',\n  AGENT_EDITOR = 'agent_editor',\n  AGENT_OWNER = 'agent_owner',\n  PROMPTGROUP_VIEWER = 'promptGroup_viewer',\n  PROMPTGROUP_EDITOR = 'promptGroup_editor',\n  PROMPTGROUP_OWNER = 'promptGroup_owner',\n}\n\n// ===== ZOD SCHEMAS =====\n\n/**\n * Principal schema - represents a user, group, role, or public access\n */\nexport const principalSchema = z.object({\n  type: z.nativeEnum(PrincipalType),\n  id: z.string().optional(), // undefined for 'public' type, role name for 'role' type\n  name: z.string().optional(),\n  email: z.string().optional(), // for user and group types\n  source: z.enum(['local', 'entra']).optional(),\n  avatar: z.string().optional(), // for user and group types\n  description: z.string().optional(), // for group and role types\n  idOnTheSource: z.string().optional(), // Entra ID for users/groups\n  accessRoleId: z.nativeEnum(AccessRoleIds).optional(), // Access role ID for permissions\n  memberCount: z.number().optional(), // for group type\n});\n\n/**\n * Access role schema - defines named permission sets\n */\nexport const accessRoleSchema = z.object({\n  accessRoleId: z.nativeEnum(AccessRoleIds),\n  name: z.string(),\n  description: z.string().optional(),\n  resourceType: z.nativeEnum(ResourceType).default(ResourceType.AGENT),\n  permBits: z.number(),\n});\n\n/**\n * Permission entry schema - represents a single ACL entry\n */\nexport const permissionEntrySchema = z.object({\n  id: z.string(),\n  principalType: z.nativeEnum(PrincipalType),\n  principalId: z.string().optional(), // undefined for 'public'\n  principalName: z.string().optional(),\n  role: accessRoleSchema,\n  grantedBy: z.string(),\n  grantedAt: z.string(), // ISO date string\n  inheritedFrom: z.string().optional(), // for project-level inheritance\n  source: z.enum(['local', 'entra']).optional(),\n});\n\n/**\n * Resource permissions response schema\n */\nexport const resourcePermissionsResponseSchema = z.object({\n  resourceType: z.nativeEnum(ResourceType),\n  resourceId: z.string(),\n  permissions: z.array(permissionEntrySchema),\n});\n\n/**\n * Update resource permissions request schema\n * This matches the user's requirement for the frontend DTO structure\n */\nexport const updateResourcePermissionsRequestSchema = z.object({\n  updated: principalSchema.array(),\n  removed: principalSchema.array(),\n  public: z.boolean(),\n  publicAccessRoleId: z.string().optional(),\n});\n\n/**\n * Update resource permissions response schema\n * Returns the updated permissions with accessRoleId included\n */\nexport const updateResourcePermissionsResponseSchema = z.object({\n  message: z.string(),\n  results: z.object({\n    principals: principalSchema.array(),\n    public: z.boolean(),\n    publicAccessRoleId: z.string().optional(),\n  }),\n});\n\n// ===== TYPESCRIPT TYPES =====\n\n/**\n * Principal - represents a user, group, or public access\n */\nexport type TPrincipal = z.infer<typeof principalSchema>;\n\n/**\n * Access role - defines named permission sets\n */\nexport type TAccessRole = z.infer<typeof accessRoleSchema>;\n\n/**\n * Permission entry - represents a single ACL entry\n */\nexport type TPermissionEntry = z.infer<typeof permissionEntrySchema>;\n\n/**\n * Resource permissions response\n */\nexport type TResourcePermissionsResponse = z.infer<typeof resourcePermissionsResponseSchema>;\n\n/**\n * Update resource permissions request\n * This matches the user's requirement for the frontend DTO structure\n */\nexport type TUpdateResourcePermissionsRequest = z.infer<\n  typeof updateResourcePermissionsRequestSchema\n>;\n\n/**\n * Update resource permissions response\n * Returns the updated permissions with accessRoleId included\n */\nexport type TUpdateResourcePermissionsResponse = z.infer<\n  typeof updateResourcePermissionsResponseSchema\n>;\n\n/**\n * Principal search request parameters\n */\nexport type TPrincipalSearchParams = {\n  q: string; // search query (required)\n  limit?: number; // max results (1-50, default 10)\n  type?: PrincipalType.USER | PrincipalType.GROUP | PrincipalType.ROLE; // filter by type (optional)\n};\n\n/**\n * Principal search result item\n */\nexport type TPrincipalSearchResult = {\n  id?: string | null; // null for Entra ID principals that don't exist locally yet\n  type: PrincipalType.USER | PrincipalType.GROUP | PrincipalType.ROLE;\n  name: string;\n  email?: string; // for users and groups\n  username?: string; // for users\n  avatar?: string; // for users and groups\n  provider?: string; // for users\n  source: 'local' | 'entra';\n  memberCount?: number; // for groups\n  description?: string; // for groups\n  idOnTheSource?: string; // Entra ID for users (maps to openidId) and groups (maps to idOnTheSource)\n};\n\n/**\n * Principal search response\n */\nexport type TPrincipalSearchResponse = {\n  query: string;\n  limit: number;\n  type?: PrincipalType.USER | PrincipalType.GROUP | PrincipalType.ROLE;\n  results: TPrincipalSearchResult[];\n  count: number;\n  sources: {\n    local: number;\n    entra: number;\n  };\n};\n\n/**\n * Available roles response\n */\nexport type TAvailableRolesResponse = {\n  resourceType: ResourceType;\n  roles: TAccessRole[];\n};\n\n/**\n * Get resource permissions response schema\n * This matches the enhanced aggregation-based endpoint response format\n */\nexport const getResourcePermissionsResponseSchema = z.object({\n  resourceType: z.nativeEnum(ResourceType),\n  resourceId: z.nativeEnum(AccessRoleIds),\n  principals: z.array(principalSchema),\n  public: z.boolean(),\n  publicAccessRoleId: z.nativeEnum(AccessRoleIds).optional(),\n});\n\n/**\n * Get resource permissions response type\n * This matches the enhanced aggregation-based endpoint response format\n */\nexport type TGetResourcePermissionsResponse = z.infer<typeof getResourcePermissionsResponseSchema>;\n\n/**\n * Effective permissions response schema\n * Returns just the permission bitmask for a user on a resource\n */\nexport const effectivePermissionsResponseSchema = z.object({\n  permissionBits: z.number(),\n});\n\n/**\n * Effective permissions response type\n * Returns just the permission bitmask for a user on a resource\n */\nexport type TEffectivePermissionsResponse = z.infer<typeof effectivePermissionsResponseSchema>;\n\n// ===== UTILITY TYPES =====\n\n/**\n * Permission check result\n */\nexport interface TPermissionCheck {\n  canView: boolean;\n  canEdit: boolean;\n  canDelete: boolean;\n  canShare: boolean;\n  accessLevel: TAccessLevel;\n}\n\n// ===== HELPER FUNCTIONS =====\n\n/**\n * Convert permission bits to access level\n */\nexport function permBitsToAccessLevel(permBits: number): TAccessLevel {\n  if ((permBits & PermissionBits.DELETE) > 0) return 'owner';\n  if ((permBits & PermissionBits.EDIT) > 0) return 'editor';\n  if ((permBits & PermissionBits.VIEW) > 0) return 'viewer';\n  return 'none';\n}\n\n/**\n * Convert access role ID to permission bits\n */\nexport function accessRoleToPermBits(accessRoleId: string): number {\n  switch (accessRoleId) {\n    case AccessRoleIds.AGENT_VIEWER:\n      return PermissionBits.VIEW;\n    case AccessRoleIds.AGENT_EDITOR:\n      return PermissionBits.VIEW | PermissionBits.EDIT;\n    case AccessRoleIds.AGENT_OWNER:\n      return PermissionBits.VIEW | PermissionBits.EDIT | PermissionBits.DELETE;\n    default:\n      return PermissionBits.VIEW;\n  }\n}\n\n/**\n * Check if permission bitmask contains other bitmask\n * @param permissions - The permission bitmask to check\n * @param requiredPermission - The required permission bit(s)\n * @returns {boolean} Whether permissions contains requiredPermission\n */\nexport function hasPermissions(permissions: number, requiredPermission: number): boolean {\n  return (permissions & requiredPermission) === requiredPermission;\n}\n","import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport type {\n  UseQueryOptions,\n  UseMutationResult,\n  QueryObserverResult,\n} from '@tanstack/react-query';\nimport { Constants, initialModelsConfig } from '../config';\nimport { defaultOrderQuery } from '../types/assistants';\nimport { MCPServerConnectionStatusResponse } from '../types/queries';\nimport * as dataService from '../data-service';\nimport * as m from '../types/mutations';\nimport * as q from '../types/queries';\nimport { QueryKeys } from '../keys';\nimport * as s from '../schemas';\nimport * as t from '../types';\nimport * as permissions from '../accessPermissions';\nimport { ResourceType } from '../accessPermissions';\n\nexport { hasPermissions } from '../accessPermissions';\n\nexport const useGetSharedMessages = (\n  shareId: string,\n  config?: UseQueryOptions<t.TSharedMessagesResponse>,\n): QueryObserverResult<t.TSharedMessagesResponse> => {\n  return useQuery<t.TSharedMessagesResponse>(\n    [QueryKeys.sharedMessages, shareId],\n    () => dataService.getSharedMessages(shareId),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useGetSharedLinkQuery = (\n  conversationId: string,\n  config?: UseQueryOptions<t.TSharedLinkGetResponse>,\n): QueryObserverResult<t.TSharedLinkGetResponse> => {\n  const queryClient = useQueryClient();\n  return useQuery<t.TSharedLinkGetResponse>(\n    [QueryKeys.sharedLinks, conversationId],\n    () => dataService.getSharedLink(conversationId),\n    {\n      enabled:\n        !!conversationId &&\n        conversationId !== Constants.NEW_CONVO &&\n        conversationId !== Constants.PENDING_CONVO,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      onSuccess: (data) => {\n        queryClient.setQueryData([QueryKeys.sharedLinks, conversationId], {\n          conversationId: data.conversationId,\n          shareId: data.shareId,\n        });\n      },\n      ...config,\n    },\n  );\n};\n\nexport const useGetConversationByIdQuery = (\n  id: string,\n  config?: UseQueryOptions<s.TConversation>,\n): QueryObserverResult<s.TConversation> => {\n  return useQuery<s.TConversation>(\n    [QueryKeys.conversation, id],\n    () => dataService.getConversationById(id),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\n//This isn't ideal because its just a query and we're using mutation, but it was the only way\n//to make it work with how the Chat component is structured\nexport const useGetConversationByIdMutation = (id: string): UseMutationResult<s.TConversation> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.getConversationById(id), {\n    // onSuccess: (res: s.TConversation) => {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.conversation, id]);\n    },\n  });\n};\n\nexport const useUpdateMessageMutation = (\n  id: string,\n): UseMutationResult<unknown, unknown, t.TUpdateMessageRequest, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateMessageRequest) => dataService.updateMessage(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.messages, id]);\n    },\n  });\n};\n\nexport const useUpdateMessageContentMutation = (\n  conversationId: string,\n): UseMutationResult<unknown, unknown, t.TUpdateMessageContent, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    (payload: t.TUpdateMessageContent) => dataService.updateMessageContent(payload),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries([QueryKeys.messages, conversationId]);\n      },\n    },\n  );\n};\n\nexport const useUpdateUserKeysMutation = (): UseMutationResult<\n  t.TUser,\n  unknown,\n  t.TUpdateUserKeyRequest,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: t.TUpdateUserKeyRequest) => dataService.updateUserKey(payload), {\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries([QueryKeys.name, variables.name]);\n    },\n  });\n};\n\nexport const useClearConversationsMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.clearAllConversations(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.allConversations]);\n    },\n  });\n};\n\nexport const useRevokeUserKeyMutation = (name: string): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeUserKey(name), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name, name]);\n      if (s.isAssistantsEndpoint(name)) {\n        queryClient.invalidateQueries([QueryKeys.assistants, name, defaultOrderQuery]);\n        queryClient.invalidateQueries([QueryKeys.assistantDocs]);\n        queryClient.invalidateQueries([QueryKeys.assistants]);\n        queryClient.invalidateQueries([QueryKeys.assistant]);\n        queryClient.invalidateQueries([QueryKeys.actions]);\n        queryClient.invalidateQueries([QueryKeys.tools]);\n      }\n    },\n  });\n};\n\nexport const useRevokeAllUserKeysMutation = (): UseMutationResult<unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation(() => dataService.revokeAllUserKeys(), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.name]);\n      queryClient.invalidateQueries([\n        QueryKeys.assistants,\n        s.EModelEndpoint.assistants,\n        defaultOrderQuery,\n      ]);\n      queryClient.invalidateQueries([\n        QueryKeys.assistants,\n        s.EModelEndpoint.azureAssistants,\n        defaultOrderQuery,\n      ]);\n      queryClient.invalidateQueries([QueryKeys.assistantDocs]);\n      queryClient.invalidateQueries([QueryKeys.assistants]);\n      queryClient.invalidateQueries([QueryKeys.assistant]);\n      queryClient.invalidateQueries([QueryKeys.actions]);\n      queryClient.invalidateQueries([QueryKeys.tools]);\n    },\n  });\n};\n\nexport const useGetModelsQuery = (\n  config?: UseQueryOptions<t.TModelsConfig>,\n): QueryObserverResult<t.TModelsConfig> => {\n  return useQuery<t.TModelsConfig>([QueryKeys.models], () => dataService.getModels(), {\n    initialData: initialModelsConfig,\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchOnMount: false,\n    staleTime: Infinity,\n    ...config,\n  });\n};\n\nexport const useCreatePresetMutation = (): UseMutationResult<\n  s.TPreset,\n  unknown,\n  s.TPreset,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset) => dataService.createPreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useDeletePresetMutation = (): UseMutationResult<\n  m.PresetDeleteResponse,\n  unknown,\n  s.TPreset | undefined,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((payload: s.TPreset | undefined) => dataService.deletePreset(payload), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.presets]);\n    },\n  });\n};\n\nexport const useUpdateTokenCountMutation = (): UseMutationResult<\n  t.TUpdateTokenCountResponse,\n  unknown,\n  { text: string },\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation(({ text }: { text: string }) => dataService.updateTokenCount(text), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.tokenCount]);\n    },\n  });\n};\n\nexport const useRegisterUserMutation = (\n  options?: m.RegistrationOptions,\n): UseMutationResult<t.TError, unknown, t.TRegisterUser, unknown> => {\n  const queryClient = useQueryClient();\n  return useMutation<t.TRegisterUserResponse, t.TError, t.TRegisterUser>(\n    (payload: t.TRegisterUser) => dataService.register(payload),\n    {\n      ...options,\n      onSuccess: (...args) => {\n        queryClient.invalidateQueries([QueryKeys.user]);\n        if (options?.onSuccess) {\n          options.onSuccess(...args);\n        }\n      },\n    },\n  );\n};\n\nexport const useUserKeyQuery = (\n  name: string,\n  config?: UseQueryOptions<t.TCheckUserKeyResponse>,\n): QueryObserverResult<t.TCheckUserKeyResponse> => {\n  return useQuery<t.TCheckUserKeyResponse>(\n    [QueryKeys.name, name],\n    () => {\n      if (!name) {\n        return Promise.resolve({ expiresAt: '' });\n      }\n      return dataService.userKeyQuery(name);\n    },\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      retry: false,\n      ...config,\n    },\n  );\n};\n\nexport const useRequestPasswordResetMutation = (): UseMutationResult<\n  t.TRequestPasswordResetResponse,\n  unknown,\n  t.TRequestPasswordReset,\n  unknown\n> => {\n  return useMutation((payload: t.TRequestPasswordReset) =>\n    dataService.requestPasswordReset(payload),\n  );\n};\n\nexport const useResetPasswordMutation = (): UseMutationResult<\n  unknown,\n  unknown,\n  t.TResetPassword,\n  unknown\n> => {\n  return useMutation((payload: t.TResetPassword) => dataService.resetPassword(payload));\n};\n\nexport const useAvailablePluginsQuery = <TData = s.TPlugin[]>(\n  config?: UseQueryOptions<s.TPlugin[], unknown, TData>,\n): QueryObserverResult<TData> => {\n  return useQuery<s.TPlugin[], unknown, TData>(\n    [QueryKeys.availablePlugins],\n    () => dataService.getAvailablePlugins(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useUpdateUserPluginsMutation = (\n  _options?: m.UpdatePluginAuthOptions,\n): UseMutationResult<t.TUser, unknown, t.TUpdateUserPlugins, unknown> => {\n  const queryClient = useQueryClient();\n  const { onSuccess, ...options } = _options ?? {};\n  return useMutation((payload: t.TUpdateUserPlugins) => dataService.updateUserPlugins(payload), {\n    ...options,\n    onSuccess: (...args) => {\n      queryClient.invalidateQueries([QueryKeys.user]);\n      onSuccess?.(...args);\n    },\n  });\n};\n\nexport const useReinitializeMCPServerMutation = (): UseMutationResult<\n  {\n    success: boolean;\n    message: string;\n    serverName: string;\n    oauthRequired?: boolean;\n    oauthUrl?: string;\n  },\n  unknown,\n  string,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((serverName: string) => dataService.reinitializeMCPServer(serverName), {\n    onSuccess: () => {\n      queryClient.refetchQueries([QueryKeys.tools]);\n    },\n  });\n};\n\nexport const useCancelMCPOAuthMutation = (): UseMutationResult<\n  m.CancelMCPOAuthResponse,\n  unknown,\n  string,\n  unknown\n> => {\n  const queryClient = useQueryClient();\n  return useMutation((serverName: string) => dataService.cancelMCPOAuth(serverName), {\n    onSuccess: () => {\n      queryClient.invalidateQueries([QueryKeys.mcpConnectionStatus]);\n    },\n  });\n};\n\nexport const useGetCustomConfigSpeechQuery = (\n  config?: UseQueryOptions<t.TCustomConfigSpeechResponse>,\n): QueryObserverResult<t.TCustomConfigSpeechResponse> => {\n  return useQuery<t.TCustomConfigSpeechResponse>(\n    [QueryKeys.customConfigSpeech],\n    () => dataService.getCustomConfigSpeech(),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      ...config,\n    },\n  );\n};\n\nexport const useUpdateFeedbackMutation = (\n  conversationId: string,\n  messageId: string,\n): UseMutationResult<t.TUpdateFeedbackResponse, Error, t.TUpdateFeedbackRequest> => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    (payload: t.TUpdateFeedbackRequest) =>\n      dataService.updateFeedback(conversationId, messageId, payload),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries([QueryKeys.messages, messageId]);\n      },\n    },\n  );\n};\n\nexport const useSearchPrincipalsQuery = (\n  params: q.PrincipalSearchParams,\n  config?: UseQueryOptions<q.PrincipalSearchResponse>,\n): QueryObserverResult<q.PrincipalSearchResponse> => {\n  return useQuery<q.PrincipalSearchResponse>(\n    [QueryKeys.principalSearch, params],\n    () => dataService.searchPrincipals(params),\n    {\n      enabled: !!params.q && params.q.length >= 2,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      staleTime: 30000,\n      ...config,\n    },\n  );\n};\n\nexport const useGetAccessRolesQuery = (\n  resourceType: ResourceType,\n  config?: UseQueryOptions<q.AccessRolesResponse>,\n): QueryObserverResult<q.AccessRolesResponse> => {\n  return useQuery<q.AccessRolesResponse>(\n    [QueryKeys.accessRoles, resourceType],\n    () => dataService.getAccessRoles(resourceType),\n    {\n      enabled: !!resourceType,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n      ...config,\n    },\n  );\n};\n\nexport const useGetResourcePermissionsQuery = (\n  resourceType: ResourceType,\n  resourceId: string,\n  config?: UseQueryOptions<permissions.TGetResourcePermissionsResponse>,\n): QueryObserverResult<permissions.TGetResourcePermissionsResponse> => {\n  return useQuery<permissions.TGetResourcePermissionsResponse>(\n    [QueryKeys.resourcePermissions, resourceType, resourceId],\n    () => dataService.getResourcePermissions(resourceType, resourceId),\n    {\n      enabled: !!resourceType && !!resourceId,\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      staleTime: 2 * 60 * 1000, // Cache for 2 minutes\n      ...config,\n    },\n  );\n};\n\nexport const useUpdateResourcePermissionsMutation = (): UseMutationResult<\n  permissions.TUpdateResourcePermissionsResponse,\n  Error,\n  {\n    resourceType: ResourceType;\n    resourceId: string;\n    data: permissions.TUpdateResourcePermissionsRequest;\n  }\n> => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ resourceType, resourceId, data }) =>\n      dataService.updateResourcePermissions(resourceType, resourceId, data),\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({\n        queryKey: [QueryKeys.accessRoles, variables.resourceType],\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [QueryKeys.resourcePermissions, variables.resourceType, variables.resourceId],\n      });\n\n      queryClient.invalidateQueries({\n        queryKey: [QueryKeys.effectivePermissions, variables.resourceType, variables.resourceId],\n      });\n    },\n  });\n};\n\nexport const useGetEffectivePermissionsQuery = (\n  resourceType: ResourceType,\n  resourceId: string,\n  config?: UseQueryOptions<permissions.TEffectivePermissionsResponse>,\n): QueryObserverResult<permissions.TEffectivePermissionsResponse> => {\n  return useQuery<permissions.TEffectivePermissionsResponse>({\n    queryKey: [QueryKeys.effectivePermissions, resourceType, resourceId],\n    queryFn: () => dataService.getEffectivePermissions(resourceType, resourceId),\n    enabled: !!resourceType && !!resourceId,\n    refetchOnWindowFocus: false,\n    staleTime: 30000,\n    ...config,\n  });\n};\n\nexport const useMCPServerConnectionStatusQuery = (\n  serverName: string,\n  config?: UseQueryOptions<MCPServerConnectionStatusResponse>,\n): QueryObserverResult<MCPServerConnectionStatusResponse> => {\n  return useQuery<MCPServerConnectionStatusResponse>(\n    [QueryKeys.mcpConnectionStatus, serverName],\n    () => dataService.getMCPServerConnectionStatus(serverName),\n    {\n      refetchOnWindowFocus: false,\n      refetchOnReconnect: false,\n      refetchOnMount: false,\n      staleTime: 10000, // 10 seconds\n      enabled: !!serverName,\n      ...config,\n    },\n  );\n};\n"],"names":["Tools","EToolResources","AnnotationTypes","StepStatus","MessageContentTypes","RunStatus","FilePurpose","AssistantStreamEvents","defaultOrderQuery","order","limit","AuthType","feedbackTagKeySchema","z","enum","feedbackRatingSchema","feedbackSchema","object","rating","tag","text","string","max","optional","uuid","EModelEndpoint","BedrockProviders","authTypeSchema","nativeEnum","Set","agents","openAI","bedrock","azureOpenAI","anthropic","custom","google","ImageDetail","ReasoningEffort","ReasoningSummary","Verbosity","_a","low","auto","high","eImageDetailSchema","eReasoningEffortSchema","eReasoningSummarySchema","eVerbositySchema","_b","agent","id","name","description","instructions","model","model_parameters","tools","provider","projectIds","artifacts","isCollaborative","recursion_limit","undefined","execute_code","file_search","web_search","category","support_contact","email","type","function","parameters","properties","required","EAgent","openAISettings","default","temperature","min","step","top_p","presence_penalty","frequency_penalty","resendFiles","maxContextTokens","max_tokens","imageDetail","LEGACY_ANTHROPIC_MAX_OUTPUT","anthropicSettings","promptCache","thinking","thinkingBudget","maxOutputTokens","reset","modelName","test","set","value","topP","topK","legacy","agentsSettings","_d","eModelEndpointSchema","extendedModelEndpointSchema","union","tPluginAuthConfigSchema","authField","label","tPluginSchema","pluginKey","icon","authConfig","array","authenticated","boolean","chatMenu","isButton","toolkit","tExampleSchema","input","content","output","agentOptionSettings","functions","classic","tAgentOptionsSchema","skipCompletion","number","messageId","endpoint","clientId","nullable","conversationId","parentMessageId","responseMessageId","overrideParentMessageId","bg","title","or","literal","sender","generation","isCreatedByUser","error","clientTimestamp","createdAt","Date","toISOString","updatedAt","current","unfinished","searchResult","finish_reason","thread_id","iconURL","feedback","coerceNumber","transform","val","trim","parseFloat","DocumentType","lazy","null","record","tConversationSchema","endpointType","isArchived","user","messages","modelLabel","userLabel","promptPrefix","system","context","examples","tags","file_ids","reasoning_effort","reasoning_summary","verbosity","useResponsesApi","disableStreaming","assistant_id","agent_id","region","maxTokens","additionalModelRequestFields","additional_instructions","append_current_datetime","presetOverride","unknown","stop","greeting","spec","expiredAt","resendImages","agentOptions","chatGptLabel","tPresetSchema","omit","merge","presetId","defaultPreset","pick","shareId","isPublic","_id","count","position","googleBaseSchema","obj","removeNullishValues","catch","presencePenalty","frequencyPenalty","stopSequences","thinkingConfig","includeThoughts","strip","gptPluginsBaseSchema","removeEmptyStrings","newObj","__assign","Object","keys","forEach","key","result","_c","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","length","bannerId","message","displayFrom","displayTo","tModelSpecSchema","preset","showIconInMenu","showIconInHeader","authType","specsConfigSchema","enforce","prioritize","list","addedEndpoints","assistants","azureAssistants","excelFileTypes","__spreadArray","supportedMimeTypes","defaultSizeLimit","assistantsFileConfig","fileLimit","fileSizeLimit","totalSizeLimit","disabled","FileSources","FileContext","AuthTypeEnum","AuthorizationTypeEnum","TokenExchangeMethodEnum","supportedMimeTypesSchema","any","refine","mimeTypes","every","mimeType","RegExp","endpointFileConfigSchema","fileConfigSchema","endpoints","serverFileSizeLimit","avatarSizeLimit","imageGeneration","percentage","px","clientImageResize","enabled","maxWidth","maxHeight","quality","envVarRegex","extractEnvVariable","trimmed","singleMatch","match","varName","process","env","regex","matches","exec","push","fullMatch","index","i","envValue","substring","SettingsViews","BaseOptionsSchema","startup","iconPath","timeout","initTimeout","serverInstructions","requiresOAuth","oauth","authorization_url","url","token_url","client_id","client_secret","scope","redirect_uri","token_exchange_method","grant_types_supported","token_endpoint_auth_methods_supported","response_types_supported","code_challenge_methods_supported","customUserVars","StdioOptionsSchema","extend","command","args","processedEnv","_i","entries","stderr","WebSocketOptionsSchema","pipe","protocol","URL","SSEOptionsSchema","headers","StreamableHTTPOptionsSchema","MCPOptionsSchema","MCPServersSchema","Capabilities","AgentCapabilities","fileSourceSchema","fileStrategiesSchema","avatar","image","document","modelConfigSchema","deploymentName","version","azureBaseSchema","apiKey","serverless","instanceName","addParams","dropParams","forcePrompt","baseURL","additionalHeaders","azureGroupSchema","group","models","and","azureGroupConfigsSchema","baseEndpointSchema","streamRate","titlePrompt","titleModel","titleConvo","titleMethod","titleEndpoint","titlePromptTemplate","availableRegions","RateLimitPrefix","assistantEndpointSchema","disableBuilder","pollIntervalMs","timeoutMs","supportedIds","excludedIds","privateAssistants","retrievalModels","capabilities","code_interpreter","image_vision","retrieval","actions","fetch","userIdQuery","defaultAgentCapabilities","chain","ocr","agentsEndpointSchema","recursionLimit","maxRecursionLimit","maxCitations","maxCitationsPerFile","minRelevanceScore","allowedProviders","endpointSchema","safeParse","success","concat","values","join","summarize","summaryModel","modelDisplayLabel","customParams","defaultParamsEndpoint","paramDefinitions","strict","customOrder","directEndpoint","titleMessageRole","azureEndpointSchema","groups","plugins","partial","ttsOpenaiSchema","voices","ttsAzureOpenAISchema","apiVersion","ttsElevenLabsSchema","websocketUrl","voice_settings","similarity_boost","stability","style","use_speaker_boost","pronunciation_dictionary_locators","ttsLocalaiSchema","backend","ttsSchema","openai","elevenlabs","localai","sttOpenaiSchema","sttAzureOpenAISchema","sttSchema","speechTab","conversationMode","advancedMode","speechToText","engineSTT","languageSTT","autoTranscribeAudio","decibelValue","autoSendText","textToSpeech","engineTTS","voice","languageTTS","automaticPlayback","playbackRate","cacheTTS","EImageOutputType","rateLimitSchema","fileUploads","ipMax","ipWindowInMinutes","userMax","userWindowInMinutes","conversationsImport","tts","stt","OCRStrategy","SearchCategories","SearchProviders","ScraperTypes","RerankerTypes","SafeSearchTypes","termsOfServiceSchema","externalUrl","openNewTab","modalAcceptance","modalTitle","modalContent","mcpServersSchema","placeholder","interfaceSchema","privacyPolicy","termsOfService","customWelcome","mcpServers","endpointsMenu","modelSelect","sidePanel","multiConvo","bookmarks","memories","presets","prompts","temporaryChat","temporaryChatRetention","runCode","webSearch","peoplePicker","users","roles","marketplace","use","fileSearch","fileCitations","turnstileOptionsSchema","language","size","turnstileSchema","siteKey","options","KnownEndpoints","FetchTokenConfig","webSearchSchema","serperApiKey","searxngInstanceUrl","searxngApiKey","firecrawlApiKey","firecrawlApiUrl","jinaApiKey","cohereApiKey","searchProvider","scraperType","rerankerType","scraperTimeout","safeSearch","MODERATE","firecrawlOptions","formats","includeTags","excludeTags","waitFor","maxAge","mobile","skipTlsVerification","blockAds","removeBase64Images","parsePDF","storeInCache","zeroDataRetention","location","country","languages","onlyMainContent","changeTrackingOptions","modes","schema","prompt","ocrSchema","mistralModel","strategy","MISTRAL_OCR","balanceSchema","startBalance","autoRefillEnabled","refillIntervalValue","refillIntervalUnit","refillAmount","memorySchema","validKeys","tokenLimit","charLimit","personalize","messageWindowSize","cache","memory","secureImageLinks","imageOutputType","PNG","includedTools","filteredTools","interface","turnstile","fileStrategy","local","fileStrategies","allowedDomains","registration","socialLogins","balance","speech","rateLimits","fileConfig","modelSpecs","all","gptPlugins","data","chatGPTBrowser","ollama","deepseek","xai","VisionModes","InfiniteCollections","Time","CacheKeys","ViolationTypes","ErrorTypes","AuthKeys","ImageDetailCost","SettingsTabValues","STTProviders","TTSProviders","Constants","LocalStorageKeys","ForkOptions","CohereConstants","SystemCategories","sharedOpenAIModels","defaultModels","openAIModels","initialModelsConfig","initial","filter","str","params","rest","__rest","query","Array","isArray","map","v","encodeURIComponent","String","buildQuery","shareRoot","keysEndpoint","conversationsRoot","_post","axios","post","JSON","stringify","sent","isRefreshing","failedQueue","refreshToken","retry","endpoints.refreshToken","dispatchTokenUpdatedEvent","token","defaults","common","setTokenHeader","window","dispatchEvent","CustomEvent","detail","processQueue","prom","reject","resolve","interceptors","response","__awaiter","originalRequest","config","Promise","includes","status","_retry","console","warn","err_1","href","log","err_2","request","get","getResponse","postMultiPart","formData","postTTS","responseType","put","delete","deleteWithOptions","patch","revokeUserKey","endpoints.revokeUserKey","revokeAllUserKeys","getSharedMessages","endpoints.shareMessages","getSharedLink","endpoints.getSharedLink","updateUserKey","payload","Error","userKeyQuery","endpoints.userKeyQuery","QueryKeys","MutationKeys","PrincipalType","PrincipalModel","ResourceType","PermissionBits","AccessRoleIds","clearAllConversations","getConversationById","endpoints.conversationById","searchPrincipals","q","types","endpoints.searchPrincipals","principalSchema","source","idOnTheSource","accessRoleId","memberCount","accessRoleSchema","resourceType","AGENT","permBits","permissionEntrySchema","principalType","principalId","principalName","role","grantedBy","grantedAt","inheritedFrom","hasPermissions","permissions","requiredPermission","resourceId","updated","removed","public","publicAccessRoleId","results","principals","permissionBits","useGetSharedMessages","useQuery","sharedMessages","dataService.getSharedMessages","refetchOnWindowFocus","refetchOnReconnect","refetchOnMount","useGetSharedLinkQuery","queryClient","useQueryClient","sharedLinks","dataService.getSharedLink","NEW_CONVO","PENDING_CONVO","onSuccess","setQueryData","useGetConversationByIdQuery","conversation","dataService.getConversationById","useGetConversationByIdMutation","useMutation","invalidateQueries","useUpdateMessageMutation","endpoints.messages","dataService.updateMessage","useUpdateMessageContentMutation","dataService.updateMessageContent","useUpdateUserKeysMutation","dataService.updateUserKey","variables","useClearConversationsMutation","dataService.clearAllConversations","allConversations","useRevokeUserKeyMutation","dataService.revokeUserKey","_endpoint","toLowerCase","endsWith","assistantDocs","assistant","useRevokeAllUserKeysMutation","dataService.revokeAllUserKeys","s.EModelEndpoint","useGetModelsQuery","initialData","staleTime","Infinity","useCreatePresetMutation","dataService.createPreset","useDeletePresetMutation","arg","useUpdateTokenCountMutation","dataService.updateTokenCount","tokenCount","useRegisterUserMutation","dataService.register","arguments","apply","useUserKeyQuery","dataService.userKeyQuery","expiresAt","useRequestPasswordResetMutation","dataService.requestPasswordReset","useResetPasswordMutation","dataService.resetPassword","useAvailablePluginsQuery","availablePlugins","useUpdateUserPluginsMutation","_options","dataService.updateUserPlugins","useReinitializeMCPServerMutation","serverName","endpoints.mcpReinitialize","dataService.reinitializeMCPServer","refetchQueries","useCancelMCPOAuthMutation","endpoints.cancelMCPOAuth","dataService.cancelMCPOAuth","mcpConnectionStatus","useGetCustomConfigSpeechQuery","customConfigSpeech","useUpdateFeedbackMutation","endpoints.feedback","dataService.updateFeedback","useSearchPrincipalsQuery","principalSearch","dataService.searchPrincipals","useGetAccessRolesQuery","accessRoles","endpoints.getAccessRoles","dataService.getAccessRoles","useGetResourcePermissionsQuery","resourcePermissions","endpoints.getResourcePermissions","dataService.getResourcePermissions","useUpdateResourcePermissionsMutation","mutationFn","endpoints.updateResourcePermissions","dataService.updateResourcePermissions","_","queryKey","effectivePermissions","useGetEffectivePermissionsQuery","queryFn","endpoints.getEffectivePermissions","dataService.getEffectivePermissions","useMCPServerConnectionStatusQuery","endpoints.mcpServerConnectionStatus","dataService.getMCPServerConnectionStatus"],"mappings":"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"}